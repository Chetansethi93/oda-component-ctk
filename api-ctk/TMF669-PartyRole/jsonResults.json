{
  "collection": {
    "_": {
      "postman_id": "e39e338d-0fc5-45b5-94af-8c5ad4d815a8"
    },
    "item": [
      {
        "id": "e75488cd-5beb-463c-a8ab-68524928e55a",
        "name": "N1",
        "item": [
          {
            "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
            "name": "/PartyRole",
            "request": {
              "description": {
                "content": "This operation creates a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                  "type": "text/javascript",
                  "exec": [
                    "var jsonData = pm.response.json();",
                    "",
                    "if (Array.isArray(jsonData)) { ",
                    "  ",
                    "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                    "  ",
                    "",
                    "}",
                    "",
                    "pm.test(\"Status code is 201\", function () {",
                    "  pm.response.to.have.status(201);",
                    "});",
                    "",
                    "var instance = pm.response.json();",
                    "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "",
                    "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "",
                    "",
                    "",
                    "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "",
                    "pm.globals.set('HREFPR01', instance['href']);",
                    "pm.globals.set('IDPR01', instance['id']);",
                    "pm.globals.set('NAMEPR01', instance['name']);",
                    "",
                    "pm.test('Body includes value held on name', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['name']);",
                    "});",
                    "pm.test('Body includes value held on href', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['href']);",
                    "});",
                    "pm.test('Body includes value held on id', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['id']);",
                    "});",
                    "pm.test('Body includes value held on name', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['name']);",
                    "});",
                    ""
                  ],
                  "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
                }
              }
            ]
          },
          {
            "id": "d1820bdb-51b2-4617-af3a-e14feaad1b0d",
            "name": "/PartyRole",
            "request": {
              "description": {
                "content": "This operation search for the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                    "        }  ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                    "        }",
                    "   ",
                    "  }",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "25a903e2-6dc6-4546-b3c3-79dc732df11b"
                }
              }
            ]
          },
          {
            "id": "272e654a-56c6-4003-a519-8dd0c6bbee4b",
            "name": "/PartyRole/{{IDPR01}}",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDPR01}}"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "368a3a27-b186-4a8d-9ac2-02ee6c63b736"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "id": "91fd014f-14f7-4892-89f1-5653df39d0ed",
        "name": "N2",
        "item": [
          {
            "id": "d6f5b35c-7d7f-4ea1-bef6-00890c038341",
            "name": "/PartyRole?fields=name",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "name"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9f9cf2ad-a767-4321-8821-34ebf88a386a"
                }
              }
            ]
          },
          {
            "id": "cdf2fae5-76c0-4919-9b6b-32c827b9c29f",
            "name": "/PartyRole?name={{NAMEPR01}}",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "name",
                    "value": "{{NAMEPR01}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "fab9acce-36a9-4902-a7db-d42e0e14e0ba"
                }
              }
            ]
          },
          {
            "id": "5abe7716-9e7d-4522-8aee-069a62d42adf",
            "name": "/PartyRole?fields=href",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "href"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2ad1e2e1-b5be-456d-9a00-c175bac48c4f"
                }
              }
            ]
          },
          {
            "id": "c6ab7b6d-8719-43a6-baac-a5105a533603",
            "name": "/PartyRole?fields=id",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "id"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3d7d0eb2-395f-46a7-94ad-8bf9edfca24b"
                }
              }
            ]
          },
          {
            "id": "11e0ac91-6601-42ce-ac25-447da447a3f7",
            "name": "/PartyRole?id={{IDPR01}}",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{IDPR01}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "c1abd650-a781-4a39-ab8a-d746d2746216"
                }
              }
            ]
          },
          {
            "id": "77d37f77-4eae-4901-9612-0f876fd6f1c3",
            "name": "/PartyRole?fields=name",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "name"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4658ebe8-051b-41ea-8870-ebe03f91efcc"
                }
              }
            ]
          },
          {
            "id": "36912107-99f3-4286-9ebc-91e946c74be5",
            "name": "/PartyRole?name={{NAMEPR01}}",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "name",
                    "value": "{{NAMEPR01}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "3fc8bb67-1390-427f-9380-393b7c2abee6"
                }
              }
            ]
          },
          {
            "id": "3a49750d-f99d-4108-a483-83d41721efc1",
            "name": "/PartyRole/{{IDPR01}}",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDPR01}}"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f653783a-0aea-44d0-a163-6934b140c585",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "68c2d716-f703-4281-b72f-974fb41410da"
                }
              }
            ]
          },
          {
            "id": "d2778fe1-3b2d-4763-b733-657992e02dc0",
            "name": "/PartyRole/{{IDPR01}}",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDPR01}}"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "       ",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "da637dd9-d933-453b-bc51-b9650e9181b4"
                }
              }
            ]
          },
          {
            "id": "3bb9c89e-6702-405f-9132-18fd1d49730b",
            "name": "/PartyRole/{{IDPR01}}",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDPR01}}"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 204\", function () {",
                    "    pm.response.to.have.status(204);",
                    "});",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "9b77799a-c270-4f80-92bf-cdb09f60acd0"
                }
              }
            ]
          },
          {
            "id": "7f3e64f4-8804-427d-b1ff-22fea7f6cf40",
            "name": "/PartyRole/404ID",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDPR01}}"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 404\", function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "a5aa7230-6547-4b18-83ac-667daa48a860"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "id": "05933068-c36e-40f0-9e86-1c88606993cd",
        "name": "E1",
        "item": [
          {
            "id": "37d1c905-1939-4813-a40d-d87079a97364",
            "name": "/PartyRole/404ID",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "b00cb440-e863-440b-a36f-74a296e06578"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "31e73c55-4701-4c8d-b7ad-bcdaf4118421",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 404\", function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "2675ecf4-e08b-403c-bef7-3ad65b3a0e67"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      }
    ],
    "event": [],
    "protocolProfileBehavior": {},
    "variable": [],
    "info": {
      "_postman_id": "e39e338d-0fc5-45b5-94af-8c5ad4d815a8",
      "name": "CTK-Party_Role-4.0.0",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2020-07-07T14:17:10.805Z",
      "postman_exported_using": "Postman/7.27.1"
    },
    "id": "da32588a-3916-4d78-a546-7623e391f650",
    "name": "TMForumv4",
    "values": [
      {
        "type": "any",
        "value": " http://localhost/r1-productcatalog/tmf-api/partyRoleManagement/v4/",
        "key": "Party_Role"
      }
    ]
  },
  "globals": {
    "id": "08297781-7006-46d4-a153-0dd4a6428e32",
    "values": [
      {
        "type": "any",
        "value": null,
        "key": "HREFPR01"
      },
      {
        "type": "any",
        "value": null,
        "key": "IDPR01"
      },
      {
        "type": "any",
        "value": null,
        "key": "NAMEPR01"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 74,
        "pending": 0,
        "failed": 19
      },
      "testScripts": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 29.666666666666668,
      "responseMin": 14,
      "responseMax": 130,
      "responseSd": 27.270659854299247,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1620664597538,
      "completed": 1620664599593
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "16c2fd56-7fef-4db8-81e3-10887b027bc0",
          "httpRequestId": "57a99855-a733-463c-9309-cd99ac12640c"
        },
        "item": {
          "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation creates a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7bc6a013-ef4d-4f4f-bf76-c36dc7ce0263",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 35,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
          }
        },
        "response": {
          "id": "a7109f10-b82b-4208-b871-6f4bcd77d23d",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 10 May 2021 16:36:38 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "97"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              50,
              52,
              44,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              98,
              111,
              100,
              121,
              32,
              102,
              105,
              101,
              108,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              58,
              32,
              114,
              111,
              108,
              101,
              84,
              121,
              112,
              101,
              32,
              110,
              111,
              116,
              32,
              97,
              108,
              108,
              111,
              119,
              101,
              100,
              32,
              105,
              110,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 130,
          "responseSize": 97
        },
        "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ 'code', 'reason', 'message' ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ 'code', 'reason', 'message' ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response has name attribute",
              "message": "expected undefined to be a string",
              "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:3:1)"
            }
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Response has href attribute",
              "message": "expected undefined to be a string",
              "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:4:1)"
            }
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "Response has id attribute",
              "message": "expected undefined to be a string",
              "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:5:1)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 5,
              "test": "Response has name attribute",
              "message": "expected undefined to be a string",
              "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:6:1)"
            }
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 6,
              "test": "Body includes value held on name",
              "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
              "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:7:1)"
            }
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 7,
              "test": "Body includes value held on href",
              "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
              "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:8:1)"
            }
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 8,
              "test": "Body includes value held on id",
              "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
              "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:9:1)"
            }
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 9,
              "test": "Body includes value held on name",
              "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
              "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:10:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9c6c291d-4886-4897-a4a1-d61f18b84314",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f8f75227-f247-4790-8e0a-6461da591dbf"
        },
        "item": {
          "id": "d1820bdb-51b2-4617-af3a-e14feaad1b0d",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation search for the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                  "        }  ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                  "        }",
                  "   ",
                  "  }",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "25a903e2-6dc6-4546-b3c3-79dc732df11b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "632060ff-298a-48cb-bd7d-bf766b1e49c1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "fe82cbbe-d18f-4900-8ed5-57c248343af7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 10 May 2021 16:36:38 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "344"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              114,
              49,
              45,
              112,
              97,
              114,
              116,
              121,
              114,
              111,
              108,
              101,
              97,
              112,
              105,
              58,
              56,
              48,
              56,
              48,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              114,
              49,
              45,
              112,
              97,
              114,
              116,
              121,
              114,
              111,
              108,
              101,
              97,
              112,
              105,
              58,
              56,
              48,
              56,
              48,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 25,
          "responseSize": 344
        },
        "id": "d1820bdb-51b2-4617-af3a-e14feaad1b0d",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e71d45bc-9051-4e11-ba21-b4ea7b66692b",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e5e67f13-4ccc-4827-a8f9-97d447fa70f9"
        },
        "item": {
          "id": "272e654a-56c6-4003-a519-8dd0c6bbee4b",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "368a3a27-b186-4a8d-9ac2-02ee6c63b736"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7ca57764-3dee-471b-89c9-4e07703ba63b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "36142133-7095-442b-8538-9f0c5df388c7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 10 May 2021 16:36:39 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "344"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              114,
              49,
              45,
              112,
              97,
              114,
              116,
              121,
              114,
              111,
              108,
              101,
              97,
              112,
              105,
              58,
              56,
              48,
              56,
              48,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              114,
              49,
              45,
              112,
              97,
              114,
              116,
              121,
              114,
              111,
              108,
              101,
              97,
              112,
              105,
              58,
              56,
              48,
              56,
              48,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 25,
          "responseSize": 344
        },
        "id": "272e654a-56c6-4003-a519-8dd0c6bbee4b",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:3)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6b7fa5a7-600e-488e-8138-46e7608a22cc",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bc1e8668-1be7-4470-808b-1b9a7ecf6bf4"
        },
        "item": {
          "id": "d6f5b35c-7d7f-4ea1-bef6-00890c038341",
          "name": "/PartyRole?fields=name",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "name"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "9f9cf2ad-a767-4321-8821-34ebf88a386a"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "name"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f352e4d5-5893-44b5-a06c-c400c5f6cfc3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "8973ddaa-318f-40cd-b343-7e4bb2cb5a3c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 10 May 2021 16:36:39 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "195"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              114,
              49,
              45,
              112,
              97,
              114,
              116,
              121,
              114,
              111,
              108,
              101,
              97,
              112,
              105,
              58,
              56,
              48,
              56,
              48,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 14,
          "responseSize": 195
        },
        "id": "d6f5b35c-7d7f-4ea1-bef6-00890c038341"
      },
      {
        "cursor": {
          "ref": "cf1c5f1a-ea4c-4c73-8f51-80dbf7f50180",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d37df060-bf1f-4fe2-a690-8b365a0426df"
        },
        "item": {
          "id": "cdf2fae5-76c0-4919-9b6b-32c827b9c29f",
          "name": "/PartyRole?name={{NAMEPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{NAMEPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "fab9acce-36a9-4902-a7db-d42e0e14e0ba"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "name",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cd1abdc6-60c1-4432-a2ed-c512dd586843",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "206ed1c0-91fa-4a77-9bcf-0f5dd9702a4e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 10 May 2021 16:36:39 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "344"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              114,
              49,
              45,
              112,
              97,
              114,
              116,
              121,
              114,
              111,
              108,
              101,
              97,
              112,
              105,
              58,
              56,
              48,
              56,
              48,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              114,
              49,
              45,
              112,
              97,
              114,
              116,
              121,
              114,
              111,
              108,
              101,
              97,
              112,
              105,
              58,
              56,
              48,
              56,
              48,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 24,
          "responseSize": 344
        },
        "id": "cdf2fae5-76c0-4919-9b6b-32c827b9c29f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:5)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c1fde8f9-6dea-4a5a-8251-6111a0698836",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8d4f049d-45a6-4ce3-b1b6-fe9f64130d69"
        },
        "item": {
          "id": "5abe7716-9e7d-4522-8aee-069a62d42adf",
          "name": "/PartyRole?fields=href",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "href"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "2ad1e2e1-b5be-456d-9a00-c175bac48c4f"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "href"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c88a3fae-34af-4ce5-bde8-45b7143c6176",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "efc5f110-839a-46a2-ab5c-e76c4eeb319e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 10 May 2021 16:36:39 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "180"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              114,
              49,
              45,
              112,
              97,
              114,
              116,
              121,
              114,
              111,
              108,
              101,
              97,
              112,
              105,
              58,
              56,
              48,
              56,
              48,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 26,
          "responseSize": 180
        },
        "id": "5abe7716-9e7d-4522-8aee-069a62d42adf"
      },
      {
        "cursor": {
          "ref": "20c09f90-bf62-4fdf-990f-494004563d19",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b66dea6e-72c6-40dd-b788-696efb817149"
        },
        "item": {
          "id": "c6ab7b6d-8719-43a6-baac-a5105a533603",
          "name": "/PartyRole?fields=id",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "id"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "3d7d0eb2-395f-46a7-94ad-8bf9edfca24b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "id"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4be1b2db-ec10-492f-aeaf-795d0c9e4b73",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "91f813a9-016d-4b71-9708-9f18880bb02a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 10 May 2021 16:36:39 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "180"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              114,
              49,
              45,
              112,
              97,
              114,
              116,
              121,
              114,
              111,
              108,
              101,
              97,
              112,
              105,
              58,
              56,
              48,
              56,
              48,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 29,
          "responseSize": 180
        },
        "id": "c6ab7b6d-8719-43a6-baac-a5105a533603"
      },
      {
        "cursor": {
          "ref": "8b742256-106b-4a31-bf25-8cdb5955ec28",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7c64600e-3dd7-408c-a92a-98e8bb071e35"
        },
        "item": {
          "id": "11e0ac91-6601-42ce-ac25-447da447a3f7",
          "name": "/PartyRole?id={{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{IDPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "c1abd650-a781-4a39-ab8a-d746d2746216"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f40a5141-6817-470b-b71b-3369291328c6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "634efaa0-5b7d-4f9f-8974-ccbaf3c72781",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 10 May 2021 16:36:39 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "344"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              114,
              49,
              45,
              112,
              97,
              114,
              116,
              121,
              114,
              111,
              108,
              101,
              97,
              112,
              105,
              58,
              56,
              48,
              56,
              48,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              114,
              49,
              45,
              112,
              97,
              114,
              116,
              121,
              114,
              111,
              108,
              101,
              97,
              112,
              105,
              58,
              56,
              48,
              56,
              48,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 30,
          "responseSize": 344
        },
        "id": "11e0ac91-6601-42ce-ac25-447da447a3f7",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:8)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "60d8851a-fcff-4445-af57-6dabfb99305b",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "894aad3a-65c6-43c8-b4f3-99d31b25d246"
        },
        "item": {
          "id": "77d37f77-4eae-4901-9612-0f876fd6f1c3",
          "name": "/PartyRole?fields=name",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "name"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "4658ebe8-051b-41ea-8870-ebe03f91efcc"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "name"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "25d271b2-fce1-46cf-8765-cea0966ec16c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a4b02082-34d1-4b0a-ade9-ab13237752d0",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 10 May 2021 16:36:39 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "195"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              114,
              49,
              45,
              112,
              97,
              114,
              116,
              121,
              114,
              111,
              108,
              101,
              97,
              112,
              105,
              58,
              56,
              48,
              56,
              48,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 26,
          "responseSize": 195
        },
        "id": "77d37f77-4eae-4901-9612-0f876fd6f1c3"
      },
      {
        "cursor": {
          "ref": "fc6a0440-3356-423f-ae3f-76c7dc0fb070",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5aa17124-dbfa-403e-8750-c255f6181953"
        },
        "item": {
          "id": "36912107-99f3-4286-9ebc-91e946c74be5",
          "name": "/PartyRole?name={{NAMEPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{NAMEPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "3fc8bb67-1390-427f-9380-393b7c2abee6"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "name",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4fa6abf0-fd68-42c7-891d-ea8a67999835",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "7f8e6465-8d8c-43a5-92fe-32439e8f850b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 10 May 2021 16:36:39 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "344"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              114,
              49,
              45,
              112,
              97,
              114,
              116,
              121,
              114,
              111,
              108,
              101,
              97,
              112,
              105,
              58,
              56,
              48,
              56,
              48,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              114,
              49,
              45,
              112,
              97,
              114,
              116,
              121,
              114,
              111,
              108,
              101,
              97,
              112,
              105,
              58,
              56,
              48,
              56,
              48,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 28,
          "responseSize": 344
        },
        "id": "36912107-99f3-4286-9ebc-91e946c74be5",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:10)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "226a5158-629d-4c82-890d-e54a63c5b0d1",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "be4aaf2e-d144-4e68-b1e3-a7988582fb13"
        },
        "item": {
          "id": "3a49750d-f99d-4108-a483-83d41721efc1",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f653783a-0aea-44d0-a163-6934b140c585",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "68c2d716-f703-4281-b72f-974fb41410da"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3fcaa7f6-f463-4b9f-bfe0-a7f9ba6412ef",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 64,
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
          }
        },
        "response": {
          "id": "222c1624-380e-487c-b7af-80ade8deaef5",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 10 May 2021 16:36:40 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "1536"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Allow",
              "value": "GET, POST"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'none'"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              60,
              104,
              116,
              109,
              108,
              32,
              108,
              97,
              110,
              103,
              61,
              34,
              101,
              110,
              34,
              62,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              109,
              101,
              116,
              97,
              32,
              99,
              104,
              97,
              114,
              115,
              101,
              116,
              61,
              34,
              117,
              116,
              102,
              45,
              56,
              34,
              62,
              10,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              112,
              114,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              82,
              111,
              117,
              116,
              101,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              105,
              110,
              32,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              40,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              41,
              32,
              98,
              117,
              116,
              32,
              116,
              104,
              101,
              114,
              101,
              32,
              105,
              115,
              32,
              110,
              111,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              112,
              97,
              116,
              99,
              104,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              46,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              101,
              110,
              100,
              52,
              48,
              53,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              114,
              111,
              117,
              116,
              101,
              114,
              46,
              106,
              115,
              58,
              51,
              48,
              54,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              82,
              111,
              117,
              116,
              101,
              114,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              114,
              111,
              117,
              116,
              101,
              114,
              46,
              106,
              115,
              58,
              52,
              50,
              49,
              58,
              49,
              54,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              52,
              56,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              111,
              114,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              111,
              114,
              46,
              106,
              115,
              58,
              51,
              55,
              49,
              58,
              49,
              52,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              46,
              106,
              115,
              58,
              52,
              53,
              48,
              58,
              49,
              52,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              54,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              46,
              97,
              112,
              112,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              53,
              49,
              58,
              51,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              46,
              101,
              109,
              105,
              116,
              32,
              40,
              101,
              118,
              101,
              110,
              116,
              115,
              46,
              106,
              115,
              58,
              49,
              57,
              56,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              112,
              97,
              114,
              115,
              101,
              114,
              79,
              110,
              73,
              110,
              99,
              111,
              109,
              105,
              110,
              103,
              32,
              40,
              95,
              104,
              116,
              116,
              112,
              95,
              115,
              101,
              114,
              118,
              101,
              114,
              46,
              106,
              115,
              58,
              54,
              57,
              49,
              58,
              49,
              50,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              72,
              84,
              84,
              80,
              80,
              97,
              114,
              115,
              101,
              114,
              46,
              112,
              97,
              114,
              115,
              101,
              114,
              79,
              110,
              72,
              101,
              97,
              100,
              101,
              114,
              115,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              40,
              95,
              104,
              116,
              116,
              112,
              95,
              99,
              111,
              109,
              109,
              111,
              110,
              46,
              106,
              115,
              58,
              49,
              49,
              49,
              58,
              49,
              55,
              41,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10
            ]
          },
          "cookie": [],
          "responseTime": 20,
          "responseSize": 1536
        },
        "id": "3a49750d-f99d-4108-a483-83d41721efc1",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 405",
              "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "244a7637-4cf0-4e73-8121-32f25b5e5e7e",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a4885337-3bc0-44d9-a2a2-f46842b56b65"
        },
        "item": {
          "id": "d2778fe1-3b2d-4763-b733-657992e02dc0",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "       ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "da637dd9-d933-453b-bc51-b9650e9181b4"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "db3dc6d7-a24a-4db8-abfb-a55b79470893",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6344931a-7fb0-428b-9eac-5cfa749540f1",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 10 May 2021 16:36:40 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "344"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              114,
              49,
              45,
              112,
              97,
              114,
              116,
              121,
              114,
              111,
              108,
              101,
              97,
              112,
              105,
              58,
              56,
              48,
              56,
              48,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              114,
              49,
              45,
              112,
              97,
              114,
              116,
              121,
              114,
              111,
              108,
              101,
              97,
              112,
              105,
              58,
              56,
              48,
              56,
              48,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 17,
          "responseSize": 344
        },
        "id": "d2778fe1-3b2d-4763-b733-657992e02dc0",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:12)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8213f414-4973-437d-949c-fa01b80c7005",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a57ee8d1-a594-45b1-90bf-e9d20336d588"
        },
        "item": {
          "id": "3bb9c89e-6702-405f-9132-18fd1d49730b",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "9b77799a-c270-4f80-92bf-cdb09f60acd0"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d9106ee6-c4ca-40ad-b5a0-40843e27a65d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "e6ce054f-c5d4-4b9b-b1a9-a463e636c8ca",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 10 May 2021 16:36:40 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "1537"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Allow",
              "value": "GET, POST"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'none'"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              60,
              104,
              116,
              109,
              108,
              32,
              108,
              97,
              110,
              103,
              61,
              34,
              101,
              110,
              34,
              62,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              109,
              101,
              116,
              97,
              32,
              99,
              104,
              97,
              114,
              115,
              101,
              116,
              61,
              34,
              117,
              116,
              102,
              45,
              56,
              34,
              62,
              10,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              112,
              114,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              82,
              111,
              117,
              116,
              101,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              105,
              110,
              32,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              40,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              41,
              32,
              98,
              117,
              116,
              32,
              116,
              104,
              101,
              114,
              101,
              32,
              105,
              115,
              32,
              110,
              111,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              46,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              101,
              110,
              100,
              52,
              48,
              53,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              114,
              111,
              117,
              116,
              101,
              114,
              46,
              106,
              115,
              58,
              51,
              48,
              54,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              82,
              111,
              117,
              116,
              101,
              114,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              114,
              111,
              117,
              116,
              101,
              114,
              46,
              106,
              115,
              58,
              52,
              50,
              49,
              58,
              49,
              54,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              52,
              56,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              111,
              114,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              111,
              114,
              46,
              106,
              115,
              58,
              51,
              55,
              49,
              58,
              49,
              52,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              46,
              106,
              115,
              58,
              52,
              53,
              48,
              58,
              49,
              52,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              54,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              46,
              97,
              112,
              112,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              53,
              49,
              58,
              51,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              46,
              101,
              109,
              105,
              116,
              32,
              40,
              101,
              118,
              101,
              110,
              116,
              115,
              46,
              106,
              115,
              58,
              49,
              57,
              56,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              112,
              97,
              114,
              115,
              101,
              114,
              79,
              110,
              73,
              110,
              99,
              111,
              109,
              105,
              110,
              103,
              32,
              40,
              95,
              104,
              116,
              116,
              112,
              95,
              115,
              101,
              114,
              118,
              101,
              114,
              46,
              106,
              115,
              58,
              54,
              57,
              49,
              58,
              49,
              50,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              72,
              84,
              84,
              80,
              80,
              97,
              114,
              115,
              101,
              114,
              46,
              112,
              97,
              114,
              115,
              101,
              114,
              79,
              110,
              72,
              101,
              97,
              100,
              101,
              114,
              115,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              40,
              95,
              104,
              116,
              116,
              112,
              95,
              99,
              111,
              109,
              109,
              111,
              110,
              46,
              106,
              115,
              58,
              49,
              49,
              49,
              58,
              49,
              55,
              41,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10
            ]
          },
          "cookie": [],
          "responseTime": 17,
          "responseSize": 1537
        },
        "id": "3bb9c89e-6702-405f-9132-18fd1d49730b",
        "assertions": [
          {
            "assertion": "Status code is 204",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 204",
              "message": "expected response to have status code 204 but got 405",
              "stack": "AssertionError: expected response to have status code 204 but got 405\n   at Object.eval sandbox-script.js:1:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "71d0ed47-5977-4e83-8052-fe5d509167e3",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "267884b5-5f6e-4480-bb0c-1f95edbe85fe"
        },
        "item": {
          "id": "7f3e64f4-8804-427d-b1ff-22fea7f6cf40",
          "name": "/PartyRole/404ID",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  ""
                ],
                "_lastExecutionId": "a5aa7230-6547-4b18-83ac-667daa48a860"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3c0e6032-6bd9-4045-8ebb-25e7deebc9f8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ae5eeec3-5c42-4586-8013-7319dde65b5d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 10 May 2021 16:36:40 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "344"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              114,
              49,
              45,
              112,
              97,
              114,
              116,
              121,
              114,
              111,
              108,
              101,
              97,
              112,
              105,
              58,
              56,
              48,
              56,
              48,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              48,
              56,
              53,
              98,
              98,
              99,
              48,
              49,
              45,
              102,
              51,
              98,
              51,
              45,
              52,
              51,
              102,
              51,
              45,
              97,
              52,
              55,
              99,
              45,
              49,
              49,
              57,
              48,
              52,
              98,
              101,
              98,
              57,
              99,
              99,
              101,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              114,
              49,
              45,
              112,
              97,
              114,
              116,
              121,
              114,
              111,
              108,
              101,
              97,
              112,
              105,
              58,
              56,
              48,
              56,
              48,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 16,
          "responseSize": 344
        },
        "id": "7f3e64f4-8804-427d-b1ff-22fea7f6cf40",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "46af4310-992a-4835-8b53-c4ffaa233a4f",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "280d8e97-d3ed-4054-9a1e-f9aec74496ec"
        },
        "item": {
          "id": "37d1c905-1939-4813-a40d-d87079a97364",
          "name": "/PartyRole/404ID",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "b00cb440-e863-440b-a36f-74a296e06578"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "31e73c55-4701-4c8d-b7ad-bcdaf4118421",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  ""
                ],
                "_lastExecutionId": "2675ecf4-e08b-403c-bef7-3ad65b3a0e67"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              "b00cb440-e863-440b-a36f-74a296e06578"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cbc8b52d-6aa9-4371-bbbd-849078045d2e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "407f01a5-8dbc-4081-988f-c2dce015ce0d",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Mon, 10 May 2021 16:36:40 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "85"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              54,
              48,
              44,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              103,
              105,
              118,
              101,
              110,
              32,
              105,
              100,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 18,
          "responseSize": 85
        },
        "id": "37d1c905-1939-4813-a40d-d87079a97364",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 6413
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201",
          "message": "expected response to have status code 201 but got 400",
          "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "07f314d63800094e22e662fde7069e53",
          "id": "1e43d481-3e20-4d6e-8870-7de3012b7327",
          "timestamp": 1620664597752,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
              }
            }
          ]
        },
        "parent": {
          "id": "e75488cd-5beb-463c-a8ab-68524928e55a",
          "name": "N1",
          "item": [
            {
              "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
                  }
                }
              ]
            },
            {
              "id": "d1820bdb-51b2-4617-af3a-e14feaad1b0d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "25a903e2-6dc6-4546-b3c3-79dc732df11b"
                  }
                }
              ]
            },
            {
              "id": "272e654a-56c6-4003-a519-8dd0c6bbee4b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "368a3a27-b186-4a8d-9ac2-02ee6c63b736"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "16c2fd56-7fef-4db8-81e3-10887b027bc0",
          "httpRequestId": "57a99855-a733-463c-9309-cd99ac12640c",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "713dee7b-b791-473c-8187-263ed7266e79"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ 'code', 'reason', 'message' ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ 'code', 'reason', 'message' ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "0592536d04ac74329436d34710fa27aa",
          "id": "66f23295-b4f7-48f3-8c2d-6c4c1b247061",
          "timestamp": 1620664597757,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
              }
            }
          ]
        },
        "parent": {
          "id": "e75488cd-5beb-463c-a8ab-68524928e55a",
          "name": "N1",
          "item": [
            {
              "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
                  }
                }
              ]
            },
            {
              "id": "d1820bdb-51b2-4617-af3a-e14feaad1b0d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "25a903e2-6dc6-4546-b3c3-79dc732df11b"
                  }
                }
              ]
            },
            {
              "id": "272e654a-56c6-4003-a519-8dd0c6bbee4b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "368a3a27-b186-4a8d-9ac2-02ee6c63b736"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "16c2fd56-7fef-4db8-81e3-10887b027bc0",
          "httpRequestId": "57a99855-a733-463c-9309-cd99ac12640c",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "713dee7b-b791-473c-8187-263ed7266e79"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response has name attribute",
          "message": "expected undefined to be a string",
          "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:3:1)",
          "checksum": "467da55d0af94b10370bf67335cff3be",
          "id": "07b761ae-514c-4c88-8de1-529f0fe90c31",
          "timestamp": 1620664597758,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
              }
            }
          ]
        },
        "parent": {
          "id": "e75488cd-5beb-463c-a8ab-68524928e55a",
          "name": "N1",
          "item": [
            {
              "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
                  }
                }
              ]
            },
            {
              "id": "d1820bdb-51b2-4617-af3a-e14feaad1b0d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "25a903e2-6dc6-4546-b3c3-79dc732df11b"
                  }
                }
              ]
            },
            {
              "id": "272e654a-56c6-4003-a519-8dd0c6bbee4b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "368a3a27-b186-4a8d-9ac2-02ee6c63b736"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "16c2fd56-7fef-4db8-81e3-10887b027bc0",
          "httpRequestId": "57a99855-a733-463c-9309-cd99ac12640c",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "713dee7b-b791-473c-8187-263ed7266e79"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Response has href attribute",
          "message": "expected undefined to be a string",
          "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:4:1)",
          "checksum": "d14566ad7a15bdf1547ee1ecf2523906",
          "id": "3252702d-ee9c-4888-992b-43cc0b592d62",
          "timestamp": 1620664597759,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
              }
            }
          ]
        },
        "parent": {
          "id": "e75488cd-5beb-463c-a8ab-68524928e55a",
          "name": "N1",
          "item": [
            {
              "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
                  }
                }
              ]
            },
            {
              "id": "d1820bdb-51b2-4617-af3a-e14feaad1b0d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "25a903e2-6dc6-4546-b3c3-79dc732df11b"
                  }
                }
              ]
            },
            {
              "id": "272e654a-56c6-4003-a519-8dd0c6bbee4b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "368a3a27-b186-4a8d-9ac2-02ee6c63b736"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "16c2fd56-7fef-4db8-81e3-10887b027bc0",
          "httpRequestId": "57a99855-a733-463c-9309-cd99ac12640c",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "713dee7b-b791-473c-8187-263ed7266e79"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 4,
          "test": "Response has id attribute",
          "message": "expected undefined to be a string",
          "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:5:1)",
          "checksum": "b42b42fce085f4fe6ea372f210e0fed7",
          "id": "abef7e1d-dd40-4a01-9f43-b9433a09bb51",
          "timestamp": 1620664597760,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
              }
            }
          ]
        },
        "parent": {
          "id": "e75488cd-5beb-463c-a8ab-68524928e55a",
          "name": "N1",
          "item": [
            {
              "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
                  }
                }
              ]
            },
            {
              "id": "d1820bdb-51b2-4617-af3a-e14feaad1b0d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "25a903e2-6dc6-4546-b3c3-79dc732df11b"
                  }
                }
              ]
            },
            {
              "id": "272e654a-56c6-4003-a519-8dd0c6bbee4b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "368a3a27-b186-4a8d-9ac2-02ee6c63b736"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "16c2fd56-7fef-4db8-81e3-10887b027bc0",
          "httpRequestId": "57a99855-a733-463c-9309-cd99ac12640c",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "713dee7b-b791-473c-8187-263ed7266e79"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 5,
          "test": "Response has name attribute",
          "message": "expected undefined to be a string",
          "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:6:1)",
          "checksum": "67022e7602f1d0567d07dd3b41940326",
          "id": "c01666f8-1c3f-4be5-9772-bac8d75d776e",
          "timestamp": 1620664597760,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 6,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:5 in test-script",
        "source": {
          "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
              }
            }
          ]
        },
        "parent": {
          "id": "e75488cd-5beb-463c-a8ab-68524928e55a",
          "name": "N1",
          "item": [
            {
              "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
                  }
                }
              ]
            },
            {
              "id": "d1820bdb-51b2-4617-af3a-e14feaad1b0d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "25a903e2-6dc6-4546-b3c3-79dc732df11b"
                  }
                }
              ]
            },
            {
              "id": "272e654a-56c6-4003-a519-8dd0c6bbee4b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "368a3a27-b186-4a8d-9ac2-02ee6c63b736"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "16c2fd56-7fef-4db8-81e3-10887b027bc0",
          "httpRequestId": "57a99855-a733-463c-9309-cd99ac12640c",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "713dee7b-b791-473c-8187-263ed7266e79"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 6,
          "test": "Body includes value held on name",
          "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
          "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:7:1)",
          "checksum": "8d35a9239f6eb0694e66d163ee81dc7a",
          "id": "9d2a548f-4d0d-4cf1-814e-a5c42fc43201",
          "timestamp": 1620664597762,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 7,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:6 in test-script",
        "source": {
          "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
              }
            }
          ]
        },
        "parent": {
          "id": "e75488cd-5beb-463c-a8ab-68524928e55a",
          "name": "N1",
          "item": [
            {
              "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
                  }
                }
              ]
            },
            {
              "id": "d1820bdb-51b2-4617-af3a-e14feaad1b0d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "25a903e2-6dc6-4546-b3c3-79dc732df11b"
                  }
                }
              ]
            },
            {
              "id": "272e654a-56c6-4003-a519-8dd0c6bbee4b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "368a3a27-b186-4a8d-9ac2-02ee6c63b736"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "16c2fd56-7fef-4db8-81e3-10887b027bc0",
          "httpRequestId": "57a99855-a733-463c-9309-cd99ac12640c",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "713dee7b-b791-473c-8187-263ed7266e79"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 7,
          "test": "Body includes value held on href",
          "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
          "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:8:1)",
          "checksum": "637b9d0200e5fa716b3b132189aaf102",
          "id": "7fefdd25-df04-4904-a66a-e18b2184e8bc",
          "timestamp": 1620664597763,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 8,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:7 in test-script",
        "source": {
          "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
              }
            }
          ]
        },
        "parent": {
          "id": "e75488cd-5beb-463c-a8ab-68524928e55a",
          "name": "N1",
          "item": [
            {
              "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
                  }
                }
              ]
            },
            {
              "id": "d1820bdb-51b2-4617-af3a-e14feaad1b0d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "25a903e2-6dc6-4546-b3c3-79dc732df11b"
                  }
                }
              ]
            },
            {
              "id": "272e654a-56c6-4003-a519-8dd0c6bbee4b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "368a3a27-b186-4a8d-9ac2-02ee6c63b736"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "16c2fd56-7fef-4db8-81e3-10887b027bc0",
          "httpRequestId": "57a99855-a733-463c-9309-cd99ac12640c",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "713dee7b-b791-473c-8187-263ed7266e79"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 8,
          "test": "Body includes value held on id",
          "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
          "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:9:1)",
          "checksum": "75406781bcd6cb8a6dd834e32f5fbcd9",
          "id": "476a087f-fdda-4bfe-9046-e223e62fcdd0",
          "timestamp": 1620664597764,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 9,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:8 in test-script",
        "source": {
          "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
              }
            }
          ]
        },
        "parent": {
          "id": "e75488cd-5beb-463c-a8ab-68524928e55a",
          "name": "N1",
          "item": [
            {
              "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
                  }
                }
              ]
            },
            {
              "id": "d1820bdb-51b2-4617-af3a-e14feaad1b0d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "25a903e2-6dc6-4546-b3c3-79dc732df11b"
                  }
                }
              ]
            },
            {
              "id": "272e654a-56c6-4003-a519-8dd0c6bbee4b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "368a3a27-b186-4a8d-9ac2-02ee6c63b736"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "16c2fd56-7fef-4db8-81e3-10887b027bc0",
          "httpRequestId": "57a99855-a733-463c-9309-cd99ac12640c",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "713dee7b-b791-473c-8187-263ed7266e79"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 9,
          "test": "Body includes value held on name",
          "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
          "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:10:1)",
          "checksum": "3371d4647fc82c247216e721d4d7e719",
          "id": "17f86733-1f41-4444-b260-48e2f9ca8f24",
          "timestamp": 1620664597765,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 10,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:9 in test-script",
        "source": {
          "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
              }
            }
          ]
        },
        "parent": {
          "id": "e75488cd-5beb-463c-a8ab-68524928e55a",
          "name": "N1",
          "item": [
            {
              "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
                  }
                }
              ]
            },
            {
              "id": "d1820bdb-51b2-4617-af3a-e14feaad1b0d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "25a903e2-6dc6-4546-b3c3-79dc732df11b"
                  }
                }
              ]
            },
            {
              "id": "272e654a-56c6-4003-a519-8dd0c6bbee4b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "368a3a27-b186-4a8d-9ac2-02ee6c63b736"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "16c2fd56-7fef-4db8-81e3-10887b027bc0",
          "httpRequestId": "57a99855-a733-463c-9309-cd99ac12640c",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "713dee7b-b791-473c-8187-263ed7266e79"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "4b5c6b1976c3c5d8eab21f19088e67bc",
          "id": "5ee7be42-eafa-4861-91fa-1e072be8d516",
          "timestamp": 1620664597897,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d1820bdb-51b2-4617-af3a-e14feaad1b0d",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation search for the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                  "        }  ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                  "        }",
                  "   ",
                  "  }",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "25a903e2-6dc6-4546-b3c3-79dc732df11b"
              }
            }
          ]
        },
        "parent": {
          "id": "e75488cd-5beb-463c-a8ab-68524928e55a",
          "name": "N1",
          "item": [
            {
              "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
                  }
                }
              ]
            },
            {
              "id": "d1820bdb-51b2-4617-af3a-e14feaad1b0d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "25a903e2-6dc6-4546-b3c3-79dc732df11b"
                  }
                }
              ]
            },
            {
              "id": "272e654a-56c6-4003-a519-8dd0c6bbee4b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "368a3a27-b186-4a8d-9ac2-02ee6c63b736"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "9c6c291d-4886-4897-a4a1-d61f18b84314",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f8f75227-f247-4790-8e0a-6461da591dbf",
          "scriptId": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
          "execution": "25a903e2-6dc6-4546-b3c3-79dc732df11b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "a0a1e6ff44f64661ee4a26a8f5bf67cc",
          "id": "3e17fa9c-6182-4878-8f34-67009f1bf26c",
          "timestamp": 1620664598037,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "272e654a-56c6-4003-a519-8dd0c6bbee4b",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "368a3a27-b186-4a8d-9ac2-02ee6c63b736"
              }
            }
          ]
        },
        "parent": {
          "id": "e75488cd-5beb-463c-a8ab-68524928e55a",
          "name": "N1",
          "item": [
            {
              "id": "cd670a9c-35a0-4aee-a49e-5ad68fce4fb2",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "713dee7b-b791-473c-8187-263ed7266e79"
                  }
                }
              ]
            },
            {
              "id": "d1820bdb-51b2-4617-af3a-e14feaad1b0d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "25a903e2-6dc6-4546-b3c3-79dc732df11b"
                  }
                }
              ]
            },
            {
              "id": "272e654a-56c6-4003-a519-8dd0c6bbee4b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "368a3a27-b186-4a8d-9ac2-02ee6c63b736"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "e71d45bc-9051-4e11-ba21-b4ea7b66692b",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e5e67f13-4ccc-4827-a8f9-97d447fa70f9",
          "scriptId": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
          "execution": "368a3a27-b186-4a8d-9ac2-02ee6c63b736"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "cada49c3645d5b70758d57cce7e1287b",
          "id": "add3adad-b750-43db-a8d0-928c05bf9273",
          "timestamp": 1620664598275,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "cdf2fae5-76c0-4919-9b6b-32c827b9c29f",
          "name": "/PartyRole?name={{NAMEPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{NAMEPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "fab9acce-36a9-4902-a7db-d42e0e14e0ba"
              }
            }
          ]
        },
        "parent": {
          "id": "91fd014f-14f7-4892-89f1-5653df39d0ed",
          "name": "N2",
          "item": [
            {
              "id": "d6f5b35c-7d7f-4ea1-bef6-00890c038341",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9f9cf2ad-a767-4321-8821-34ebf88a386a"
                  }
                }
              ]
            },
            {
              "id": "cdf2fae5-76c0-4919-9b6b-32c827b9c29f",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "fab9acce-36a9-4902-a7db-d42e0e14e0ba"
                  }
                }
              ]
            },
            {
              "id": "5abe7716-9e7d-4522-8aee-069a62d42adf",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2ad1e2e1-b5be-456d-9a00-c175bac48c4f"
                  }
                }
              ]
            },
            {
              "id": "c6ab7b6d-8719-43a6-baac-a5105a533603",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3d7d0eb2-395f-46a7-94ad-8bf9edfca24b"
                  }
                }
              ]
            },
            {
              "id": "11e0ac91-6601-42ce-ac25-447da447a3f7",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c1abd650-a781-4a39-ab8a-d746d2746216"
                  }
                }
              ]
            },
            {
              "id": "77d37f77-4eae-4901-9612-0f876fd6f1c3",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "4658ebe8-051b-41ea-8870-ebe03f91efcc"
                  }
                }
              ]
            },
            {
              "id": "36912107-99f3-4286-9ebc-91e946c74be5",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "3fc8bb67-1390-427f-9380-393b7c2abee6"
                  }
                }
              ]
            },
            {
              "id": "3a49750d-f99d-4108-a483-83d41721efc1",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "68c2d716-f703-4281-b72f-974fb41410da"
                  }
                }
              ]
            },
            {
              "id": "d2778fe1-3b2d-4763-b733-657992e02dc0",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "da637dd9-d933-453b-bc51-b9650e9181b4"
                  }
                }
              ]
            },
            {
              "id": "3bb9c89e-6702-405f-9132-18fd1d49730b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "9b77799a-c270-4f80-92bf-cdb09f60acd0"
                  }
                }
              ]
            },
            {
              "id": "7f3e64f4-8804-427d-b1ff-22fea7f6cf40",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "a5aa7230-6547-4b18-83ac-667daa48a860"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "cf1c5f1a-ea4c-4c73-8f51-80dbf7f50180",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d37df060-bf1f-4fe2-a690-8b365a0426df",
          "scriptId": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
          "execution": "fab9acce-36a9-4902-a7db-d42e0e14e0ba"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "bc19defb619c63f2d545b97aa4011709",
          "id": "68571819-c958-41e5-a7fa-e3aa76929216",
          "timestamp": 1620664598680,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "11e0ac91-6601-42ce-ac25-447da447a3f7",
          "name": "/PartyRole?id={{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{IDPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "c1abd650-a781-4a39-ab8a-d746d2746216"
              }
            }
          ]
        },
        "parent": {
          "id": "91fd014f-14f7-4892-89f1-5653df39d0ed",
          "name": "N2",
          "item": [
            {
              "id": "d6f5b35c-7d7f-4ea1-bef6-00890c038341",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9f9cf2ad-a767-4321-8821-34ebf88a386a"
                  }
                }
              ]
            },
            {
              "id": "cdf2fae5-76c0-4919-9b6b-32c827b9c29f",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "fab9acce-36a9-4902-a7db-d42e0e14e0ba"
                  }
                }
              ]
            },
            {
              "id": "5abe7716-9e7d-4522-8aee-069a62d42adf",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2ad1e2e1-b5be-456d-9a00-c175bac48c4f"
                  }
                }
              ]
            },
            {
              "id": "c6ab7b6d-8719-43a6-baac-a5105a533603",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3d7d0eb2-395f-46a7-94ad-8bf9edfca24b"
                  }
                }
              ]
            },
            {
              "id": "11e0ac91-6601-42ce-ac25-447da447a3f7",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c1abd650-a781-4a39-ab8a-d746d2746216"
                  }
                }
              ]
            },
            {
              "id": "77d37f77-4eae-4901-9612-0f876fd6f1c3",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "4658ebe8-051b-41ea-8870-ebe03f91efcc"
                  }
                }
              ]
            },
            {
              "id": "36912107-99f3-4286-9ebc-91e946c74be5",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "3fc8bb67-1390-427f-9380-393b7c2abee6"
                  }
                }
              ]
            },
            {
              "id": "3a49750d-f99d-4108-a483-83d41721efc1",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "68c2d716-f703-4281-b72f-974fb41410da"
                  }
                }
              ]
            },
            {
              "id": "d2778fe1-3b2d-4763-b733-657992e02dc0",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "da637dd9-d933-453b-bc51-b9650e9181b4"
                  }
                }
              ]
            },
            {
              "id": "3bb9c89e-6702-405f-9132-18fd1d49730b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "9b77799a-c270-4f80-92bf-cdb09f60acd0"
                  }
                }
              ]
            },
            {
              "id": "7f3e64f4-8804-427d-b1ff-22fea7f6cf40",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "a5aa7230-6547-4b18-83ac-667daa48a860"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "8b742256-106b-4a31-bf25-8cdb5955ec28",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7c64600e-3dd7-408c-a92a-98e8bb071e35",
          "scriptId": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
          "execution": "c1abd650-a781-4a39-ab8a-d746d2746216"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "516a59347529fef1eb7e754723fb4e6d",
          "id": "ec436956-58f7-48b0-9365-41af613b04c8",
          "timestamp": 1620664598944,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "36912107-99f3-4286-9ebc-91e946c74be5",
          "name": "/PartyRole?name={{NAMEPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{NAMEPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "3fc8bb67-1390-427f-9380-393b7c2abee6"
              }
            }
          ]
        },
        "parent": {
          "id": "91fd014f-14f7-4892-89f1-5653df39d0ed",
          "name": "N2",
          "item": [
            {
              "id": "d6f5b35c-7d7f-4ea1-bef6-00890c038341",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9f9cf2ad-a767-4321-8821-34ebf88a386a"
                  }
                }
              ]
            },
            {
              "id": "cdf2fae5-76c0-4919-9b6b-32c827b9c29f",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "fab9acce-36a9-4902-a7db-d42e0e14e0ba"
                  }
                }
              ]
            },
            {
              "id": "5abe7716-9e7d-4522-8aee-069a62d42adf",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2ad1e2e1-b5be-456d-9a00-c175bac48c4f"
                  }
                }
              ]
            },
            {
              "id": "c6ab7b6d-8719-43a6-baac-a5105a533603",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3d7d0eb2-395f-46a7-94ad-8bf9edfca24b"
                  }
                }
              ]
            },
            {
              "id": "11e0ac91-6601-42ce-ac25-447da447a3f7",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c1abd650-a781-4a39-ab8a-d746d2746216"
                  }
                }
              ]
            },
            {
              "id": "77d37f77-4eae-4901-9612-0f876fd6f1c3",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "4658ebe8-051b-41ea-8870-ebe03f91efcc"
                  }
                }
              ]
            },
            {
              "id": "36912107-99f3-4286-9ebc-91e946c74be5",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "3fc8bb67-1390-427f-9380-393b7c2abee6"
                  }
                }
              ]
            },
            {
              "id": "3a49750d-f99d-4108-a483-83d41721efc1",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "68c2d716-f703-4281-b72f-974fb41410da"
                  }
                }
              ]
            },
            {
              "id": "d2778fe1-3b2d-4763-b733-657992e02dc0",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "da637dd9-d933-453b-bc51-b9650e9181b4"
                  }
                }
              ]
            },
            {
              "id": "3bb9c89e-6702-405f-9132-18fd1d49730b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "9b77799a-c270-4f80-92bf-cdb09f60acd0"
                  }
                }
              ]
            },
            {
              "id": "7f3e64f4-8804-427d-b1ff-22fea7f6cf40",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "a5aa7230-6547-4b18-83ac-667daa48a860"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "fc6a0440-3356-423f-ae3f-76c7dc0fb070",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5aa17124-dbfa-403e-8750-c255f6181953",
          "scriptId": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
          "execution": "3fc8bb67-1390-427f-9380-393b7c2abee6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 405",
          "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "a5795b37f243c7713278eb9b12c8e4c5",
          "id": "8536db8c-24d9-4d90-bbf1-853047fd22ae",
          "timestamp": 1620664599065,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3a49750d-f99d-4108-a483-83d41721efc1",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f653783a-0aea-44d0-a163-6934b140c585",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "68c2d716-f703-4281-b72f-974fb41410da"
              }
            }
          ]
        },
        "parent": {
          "id": "91fd014f-14f7-4892-89f1-5653df39d0ed",
          "name": "N2",
          "item": [
            {
              "id": "d6f5b35c-7d7f-4ea1-bef6-00890c038341",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9f9cf2ad-a767-4321-8821-34ebf88a386a"
                  }
                }
              ]
            },
            {
              "id": "cdf2fae5-76c0-4919-9b6b-32c827b9c29f",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "fab9acce-36a9-4902-a7db-d42e0e14e0ba"
                  }
                }
              ]
            },
            {
              "id": "5abe7716-9e7d-4522-8aee-069a62d42adf",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2ad1e2e1-b5be-456d-9a00-c175bac48c4f"
                  }
                }
              ]
            },
            {
              "id": "c6ab7b6d-8719-43a6-baac-a5105a533603",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3d7d0eb2-395f-46a7-94ad-8bf9edfca24b"
                  }
                }
              ]
            },
            {
              "id": "11e0ac91-6601-42ce-ac25-447da447a3f7",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c1abd650-a781-4a39-ab8a-d746d2746216"
                  }
                }
              ]
            },
            {
              "id": "77d37f77-4eae-4901-9612-0f876fd6f1c3",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "4658ebe8-051b-41ea-8870-ebe03f91efcc"
                  }
                }
              ]
            },
            {
              "id": "36912107-99f3-4286-9ebc-91e946c74be5",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "3fc8bb67-1390-427f-9380-393b7c2abee6"
                  }
                }
              ]
            },
            {
              "id": "3a49750d-f99d-4108-a483-83d41721efc1",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "68c2d716-f703-4281-b72f-974fb41410da"
                  }
                }
              ]
            },
            {
              "id": "d2778fe1-3b2d-4763-b733-657992e02dc0",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "da637dd9-d933-453b-bc51-b9650e9181b4"
                  }
                }
              ]
            },
            {
              "id": "3bb9c89e-6702-405f-9132-18fd1d49730b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "9b77799a-c270-4f80-92bf-cdb09f60acd0"
                  }
                }
              ]
            },
            {
              "id": "7f3e64f4-8804-427d-b1ff-22fea7f6cf40",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "a5aa7230-6547-4b18-83ac-667daa48a860"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "226a5158-629d-4c82-890d-e54a63c5b0d1",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "be4aaf2e-d144-4e68-b1e3-a7988582fb13",
          "scriptId": "f653783a-0aea-44d0-a163-6934b140c585",
          "execution": "68c2d716-f703-4281-b72f-974fb41410da"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "71f79b0d5a8f0583269da176b5578e5f",
          "id": "0bebc367-fb4d-4073-86a7-bedb8679f817",
          "timestamp": 1620664599195,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d2778fe1-3b2d-4763-b733-657992e02dc0",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "       ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "da637dd9-d933-453b-bc51-b9650e9181b4"
              }
            }
          ]
        },
        "parent": {
          "id": "91fd014f-14f7-4892-89f1-5653df39d0ed",
          "name": "N2",
          "item": [
            {
              "id": "d6f5b35c-7d7f-4ea1-bef6-00890c038341",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9f9cf2ad-a767-4321-8821-34ebf88a386a"
                  }
                }
              ]
            },
            {
              "id": "cdf2fae5-76c0-4919-9b6b-32c827b9c29f",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "fab9acce-36a9-4902-a7db-d42e0e14e0ba"
                  }
                }
              ]
            },
            {
              "id": "5abe7716-9e7d-4522-8aee-069a62d42adf",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2ad1e2e1-b5be-456d-9a00-c175bac48c4f"
                  }
                }
              ]
            },
            {
              "id": "c6ab7b6d-8719-43a6-baac-a5105a533603",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3d7d0eb2-395f-46a7-94ad-8bf9edfca24b"
                  }
                }
              ]
            },
            {
              "id": "11e0ac91-6601-42ce-ac25-447da447a3f7",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c1abd650-a781-4a39-ab8a-d746d2746216"
                  }
                }
              ]
            },
            {
              "id": "77d37f77-4eae-4901-9612-0f876fd6f1c3",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "4658ebe8-051b-41ea-8870-ebe03f91efcc"
                  }
                }
              ]
            },
            {
              "id": "36912107-99f3-4286-9ebc-91e946c74be5",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "3fc8bb67-1390-427f-9380-393b7c2abee6"
                  }
                }
              ]
            },
            {
              "id": "3a49750d-f99d-4108-a483-83d41721efc1",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "68c2d716-f703-4281-b72f-974fb41410da"
                  }
                }
              ]
            },
            {
              "id": "d2778fe1-3b2d-4763-b733-657992e02dc0",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "da637dd9-d933-453b-bc51-b9650e9181b4"
                  }
                }
              ]
            },
            {
              "id": "3bb9c89e-6702-405f-9132-18fd1d49730b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "9b77799a-c270-4f80-92bf-cdb09f60acd0"
                  }
                }
              ]
            },
            {
              "id": "7f3e64f4-8804-427d-b1ff-22fea7f6cf40",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "a5aa7230-6547-4b18-83ac-667daa48a860"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "244a7637-4cf0-4e73-8121-32f25b5e5e7e",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a4885337-3bc0-44d9-a2a2-f46842b56b65",
          "scriptId": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
          "execution": "da637dd9-d933-453b-bc51-b9650e9181b4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 204",
          "message": "expected response to have status code 204 but got 405",
          "stack": "AssertionError: expected response to have status code 204 but got 405\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "c248c7326ad3a680ca57953e6b3c2acf",
          "id": "f4535eb7-d2b1-4ca0-8f9e-f2e9be4c0f03",
          "timestamp": 1620664599306,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3bb9c89e-6702-405f-9132-18fd1d49730b",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "9b77799a-c270-4f80-92bf-cdb09f60acd0"
              }
            }
          ]
        },
        "parent": {
          "id": "91fd014f-14f7-4892-89f1-5653df39d0ed",
          "name": "N2",
          "item": [
            {
              "id": "d6f5b35c-7d7f-4ea1-bef6-00890c038341",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9f9cf2ad-a767-4321-8821-34ebf88a386a"
                  }
                }
              ]
            },
            {
              "id": "cdf2fae5-76c0-4919-9b6b-32c827b9c29f",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "fab9acce-36a9-4902-a7db-d42e0e14e0ba"
                  }
                }
              ]
            },
            {
              "id": "5abe7716-9e7d-4522-8aee-069a62d42adf",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2ad1e2e1-b5be-456d-9a00-c175bac48c4f"
                  }
                }
              ]
            },
            {
              "id": "c6ab7b6d-8719-43a6-baac-a5105a533603",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3d7d0eb2-395f-46a7-94ad-8bf9edfca24b"
                  }
                }
              ]
            },
            {
              "id": "11e0ac91-6601-42ce-ac25-447da447a3f7",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c1abd650-a781-4a39-ab8a-d746d2746216"
                  }
                }
              ]
            },
            {
              "id": "77d37f77-4eae-4901-9612-0f876fd6f1c3",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "4658ebe8-051b-41ea-8870-ebe03f91efcc"
                  }
                }
              ]
            },
            {
              "id": "36912107-99f3-4286-9ebc-91e946c74be5",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "3fc8bb67-1390-427f-9380-393b7c2abee6"
                  }
                }
              ]
            },
            {
              "id": "3a49750d-f99d-4108-a483-83d41721efc1",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "68c2d716-f703-4281-b72f-974fb41410da"
                  }
                }
              ]
            },
            {
              "id": "d2778fe1-3b2d-4763-b733-657992e02dc0",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "da637dd9-d933-453b-bc51-b9650e9181b4"
                  }
                }
              ]
            },
            {
              "id": "3bb9c89e-6702-405f-9132-18fd1d49730b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "9b77799a-c270-4f80-92bf-cdb09f60acd0"
                  }
                }
              ]
            },
            {
              "id": "7f3e64f4-8804-427d-b1ff-22fea7f6cf40",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "a5aa7230-6547-4b18-83ac-667daa48a860"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "8213f414-4973-437d-949c-fa01b80c7005",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a57ee8d1-a594-45b1-90bf-e9d20336d588",
          "scriptId": "396d389e-c29c-4f93-a7b4-41e2c728886b",
          "execution": "9b77799a-c270-4f80-92bf-cdb09f60acd0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 404",
          "message": "expected response to have status code 404 but got 200",
          "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "d13d7d573ac6ef4ce79925080d6d7aa1",
          "id": "fd1b3601-898f-4955-97d7-80b194b43b94",
          "timestamp": 1620664599436,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7f3e64f4-8804-427d-b1ff-22fea7f6cf40",
          "name": "/PartyRole/404ID",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  ""
                ],
                "_lastExecutionId": "a5aa7230-6547-4b18-83ac-667daa48a860"
              }
            }
          ]
        },
        "parent": {
          "id": "91fd014f-14f7-4892-89f1-5653df39d0ed",
          "name": "N2",
          "item": [
            {
              "id": "d6f5b35c-7d7f-4ea1-bef6-00890c038341",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9f9cf2ad-a767-4321-8821-34ebf88a386a"
                  }
                }
              ]
            },
            {
              "id": "cdf2fae5-76c0-4919-9b6b-32c827b9c29f",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "fab9acce-36a9-4902-a7db-d42e0e14e0ba"
                  }
                }
              ]
            },
            {
              "id": "5abe7716-9e7d-4522-8aee-069a62d42adf",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2ad1e2e1-b5be-456d-9a00-c175bac48c4f"
                  }
                }
              ]
            },
            {
              "id": "c6ab7b6d-8719-43a6-baac-a5105a533603",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3d7d0eb2-395f-46a7-94ad-8bf9edfca24b"
                  }
                }
              ]
            },
            {
              "id": "11e0ac91-6601-42ce-ac25-447da447a3f7",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c1abd650-a781-4a39-ab8a-d746d2746216"
                  }
                }
              ]
            },
            {
              "id": "77d37f77-4eae-4901-9612-0f876fd6f1c3",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "4658ebe8-051b-41ea-8870-ebe03f91efcc"
                  }
                }
              ]
            },
            {
              "id": "36912107-99f3-4286-9ebc-91e946c74be5",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "3fc8bb67-1390-427f-9380-393b7c2abee6"
                  }
                }
              ]
            },
            {
              "id": "3a49750d-f99d-4108-a483-83d41721efc1",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "68c2d716-f703-4281-b72f-974fb41410da"
                  }
                }
              ]
            },
            {
              "id": "d2778fe1-3b2d-4763-b733-657992e02dc0",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "da637dd9-d933-453b-bc51-b9650e9181b4"
                  }
                }
              ]
            },
            {
              "id": "3bb9c89e-6702-405f-9132-18fd1d49730b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "9b77799a-c270-4f80-92bf-cdb09f60acd0"
                  }
                }
              ]
            },
            {
              "id": "7f3e64f4-8804-427d-b1ff-22fea7f6cf40",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "a5aa7230-6547-4b18-83ac-667daa48a860"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "71d0ed47-5977-4e83-8052-fe5d509167e3",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "267884b5-5f6e-4480-bb0c-1f95edbe85fe",
          "scriptId": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
          "execution": "a5aa7230-6547-4b18-83ac-667daa48a860"
        }
      }
    ],
    "error": null
  }
}