{
  "collection": {
    "_": {
      "postman_id": "e39e338d-0fc5-45b5-94af-8c5ad4d815a8"
    },
    "item": [
      {
        "id": "2f8f6389-3680-4f93-8a08-9f0c2a9e4a08",
        "name": "N1",
        "item": [
          {
            "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
            "name": "/PartyRole",
            "request": {
              "description": {
                "content": "This operation creates a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                  "type": "text/javascript",
                  "exec": [
                    "var jsonData = pm.response.json();",
                    "",
                    "if (Array.isArray(jsonData)) { ",
                    "  ",
                    "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                    "  ",
                    "",
                    "}",
                    "",
                    "pm.test(\"Status code is 201\", function () {",
                    "  pm.response.to.have.status(201);",
                    "});",
                    "",
                    "var instance = pm.response.json();",
                    "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "",
                    "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "",
                    "",
                    "",
                    "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "",
                    "pm.globals.set('HREFPR01', instance['href']);",
                    "pm.globals.set('IDPR01', instance['id']);",
                    "pm.globals.set('NAMEPR01', instance['name']);",
                    "",
                    "pm.test('Body includes value held on name', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['name']);",
                    "});",
                    "pm.test('Body includes value held on href', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['href']);",
                    "});",
                    "pm.test('Body includes value held on id', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['id']);",
                    "});",
                    "pm.test('Body includes value held on name', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['name']);",
                    "});",
                    ""
                  ],
                  "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
                }
              }
            ]
          },
          {
            "id": "b7102ad9-7aac-421b-9d68-41873e6a4b71",
            "name": "/PartyRole",
            "request": {
              "description": {
                "content": "This operation search for the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                    "        }  ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                    "        }",
                    "   ",
                    "  }",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "28bef6b4-b09c-425b-9490-a50537f0ad39"
                }
              }
            ]
          },
          {
            "id": "c5638e7d-6ebf-470e-8ab2-464294638721",
            "name": "/PartyRole/{{IDPR01}}",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDPR01}}"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "abcda252-af04-4dc6-a6bb-adb86486a842"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "id": "28e61bb7-658e-48f1-a13f-709417c796f6",
        "name": "N2",
        "item": [
          {
            "id": "85fafcb6-a741-4f94-abd7-530cf2617d55",
            "name": "/PartyRole?fields=name",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "name"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "57f00ace-1c53-4836-9661-83faf173a579"
                }
              }
            ]
          },
          {
            "id": "3e66d066-14fb-4f02-a8d7-a36656fa7794",
            "name": "/PartyRole?name={{NAMEPR01}}",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "name",
                    "value": "{{NAMEPR01}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "47941baa-47c7-4012-a1bd-30ed17906b9e"
                }
              }
            ]
          },
          {
            "id": "176b231d-5289-4e5a-87b0-ccf96948008b",
            "name": "/PartyRole?fields=href",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "href"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9deb424f-43da-4b0b-afe9-99be6229e630"
                }
              }
            ]
          },
          {
            "id": "9b32a12a-8b77-4d4c-ba7a-ecafbe7b7ff0",
            "name": "/PartyRole?fields=id",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "id"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a38dac3d-3cc0-41d2-8e93-c69e2d812299"
                }
              }
            ]
          },
          {
            "id": "413e6fd3-1641-4805-b0c9-8d1e7c967eaf",
            "name": "/PartyRole?id={{IDPR01}}",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{IDPR01}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "029515de-82a5-46e7-8a52-1558a38c1d6e"
                }
              }
            ]
          },
          {
            "id": "791232bc-46e2-4051-8975-5ae0baf05b82",
            "name": "/PartyRole?fields=name",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "name"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3671749f-3caa-4bba-b0c5-0e2305f2438d"
                }
              }
            ]
          },
          {
            "id": "038f7dd0-a4ea-4b70-9b02-65aa6543dafc",
            "name": "/PartyRole?name={{NAMEPR01}}",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "name",
                    "value": "{{NAMEPR01}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "b6ecf68c-ef30-4dba-8bbb-c63e96109eec"
                }
              }
            ]
          },
          {
            "id": "19618721-ef84-4723-a76a-cce857df936c",
            "name": "/PartyRole/{{IDPR01}}",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDPR01}}"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f653783a-0aea-44d0-a163-6934b140c585",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "8112a3b5-2a8e-45ed-8ddb-ef1b81ee9288"
                }
              }
            ]
          },
          {
            "id": "94fb3c2f-f825-47bd-ab93-00e6c00af616",
            "name": "/PartyRole/{{IDPR01}}",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDPR01}}"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "       ",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "a955d718-c846-4035-984f-cea60e48b75d"
                }
              }
            ]
          },
          {
            "id": "cf2bddfc-a970-4c6b-a485-66a65887ae78",
            "name": "/PartyRole/{{IDPR01}}",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDPR01}}"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 204\", function () {",
                    "    pm.response.to.have.status(204);",
                    "});",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "2dfd0e11-684e-4217-becd-564fd5f01f76"
                }
              }
            ]
          },
          {
            "id": "da01a5be-cf8f-4cb6-87fd-94c923da48b3",
            "name": "/PartyRole/404ID",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDPR01}}"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 404\", function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "5aaaaecb-5601-4101-84e8-c715e0ceb113"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "id": "8583385d-4be1-4dfe-954f-be20ceef076c",
        "name": "E1",
        "item": [
          {
            "id": "c8b6dfe0-beb6-4a10-8282-f68574b91202",
            "name": "/PartyRole/404ID",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "b00cb440-e863-440b-a36f-74a296e06578"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "31e73c55-4701-4c8d-b7ad-bcdaf4118421",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 404\", function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "e3f07b8f-4e62-4878-8559-e7cd35991c10"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      }
    ],
    "event": [],
    "protocolProfileBehavior": {},
    "variable": [],
    "info": {
      "_postman_id": "e39e338d-0fc5-45b5-94af-8c5ad4d815a8",
      "name": "CTK-Party_Role-4.0.0",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2020-07-07T14:17:10.805Z",
      "postman_exported_using": "Postman/7.27.1"
    },
    "id": "da32588a-3916-4d78-a546-7623e391f650",
    "name": "TMForumv4",
    "values": [
      {
        "type": "any",
        "value": "http://localhost/r1-productcatalog/tmf-api/partyRoleManagement/v4/",
        "key": "Party_Role"
      }
    ]
  },
  "globals": {
    "id": "55e7ac01-da0a-46fa-a31c-307c10fd5ec8",
    "values": [
      {
        "type": "any",
        "value": null,
        "key": "HREFPR01"
      },
      {
        "type": "any",
        "value": null,
        "key": "IDPR01"
      },
      {
        "type": "any",
        "value": null,
        "key": "NAMEPR01"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 74,
        "pending": 0,
        "failed": 19
      },
      "testScripts": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 15.133333333333333,
      "responseMin": 6,
      "responseMax": 63,
      "responseSd": 13.093849277003645,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1620808389051,
      "completed": 1620808390616
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "14b16c9a-f785-487e-93ec-1ca6ce6cba17",
          "httpRequestId": "aef5ece3-dd08-4142-afdb-3eedff2af99f"
        },
        "item": {
          "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation creates a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2c7241af-a093-479b-86a4-4ae5c683ac72",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 35,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
          }
        },
        "response": {
          "id": "20ee0526-3aaa-4ba5-8ebc-5fc7cd334c4d",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 12 May 2021 08:33:09 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "97"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              50,
              52,
              44,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              98,
              111,
              100,
              121,
              32,
              102,
              105,
              101,
              108,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              58,
              32,
              114,
              111,
              108,
              101,
              84,
              121,
              112,
              101,
              32,
              110,
              111,
              116,
              32,
              97,
              108,
              108,
              111,
              119,
              101,
              100,
              32,
              105,
              110,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 63,
          "responseSize": 97
        },
        "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ 'code', 'reason', 'message' ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ 'code', 'reason', 'message' ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response has name attribute",
              "message": "expected undefined to be a string",
              "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:3:1)"
            }
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Response has href attribute",
              "message": "expected undefined to be a string",
              "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:4:1)"
            }
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "Response has id attribute",
              "message": "expected undefined to be a string",
              "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:5:1)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 5,
              "test": "Response has name attribute",
              "message": "expected undefined to be a string",
              "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:6:1)"
            }
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 6,
              "test": "Body includes value held on name",
              "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
              "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:7:1)"
            }
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 7,
              "test": "Body includes value held on href",
              "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
              "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:8:1)"
            }
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 8,
              "test": "Body includes value held on id",
              "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
              "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:9:1)"
            }
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 9,
              "test": "Body includes value held on name",
              "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
              "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:10:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "97103f64-d950-489b-8698-18db245a4ab7",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "aa9c67bd-c6fc-4aea-b89c-cea1ada95913"
        },
        "item": {
          "id": "b7102ad9-7aac-421b-9d68-41873e6a4b71",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation search for the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                  "        }  ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                  "        }",
                  "   ",
                  "  }",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "28bef6b4-b09c-425b-9490-a50537f0ad39"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f9d6265a-a7cb-4d51-a7f7-7f24130a66ee",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "8301c6f8-0b7b-4b40-b2df-65d8e1bf5e11",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 12 May 2021 08:33:09 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 322
        },
        "id": "b7102ad9-7aac-421b-9d68-41873e6a4b71",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8f7b1ba1-82b4-47ad-8cfc-a3969b8e663c",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "57883dbe-a05e-4229-8b9f-b2c01c179c32"
        },
        "item": {
          "id": "c5638e7d-6ebf-470e-8ab2-464294638721",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "abcda252-af04-4dc6-a6bb-adb86486a842"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1bab5756-f7d9-4ffe-ae07-984304de194a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ba5ac2af-7420-4272-b66f-065f6204358e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 12 May 2021 08:33:09 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 15,
          "responseSize": 322
        },
        "id": "c5638e7d-6ebf-470e-8ab2-464294638721",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:3)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6601e640-f23a-4ca2-977a-952ffa0fd24e",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fb28e5fd-9270-4e25-ab72-dd88624782a7"
        },
        "item": {
          "id": "85fafcb6-a741-4f94-abd7-530cf2617d55",
          "name": "/PartyRole?fields=name",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "name"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "57f00ace-1c53-4836-9661-83faf173a579"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "name"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "26a6b79e-1c24-4afc-9f4d-8eb24a21c9ff",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c81da116-9fab-4a7d-afc8-18f354458af6",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 12 May 2021 08:33:09 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "184"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 184
        },
        "id": "85fafcb6-a741-4f94-abd7-530cf2617d55"
      },
      {
        "cursor": {
          "ref": "5f5f0882-eebf-46e4-b777-ab5a4fe592dc",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "86adb8e3-0118-40a3-ba21-17ebd989d56a"
        },
        "item": {
          "id": "3e66d066-14fb-4f02-a8d7-a36656fa7794",
          "name": "/PartyRole?name={{NAMEPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{NAMEPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "47941baa-47c7-4012-a1bd-30ed17906b9e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "name",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b363da73-e0e4-4535-abe3-e4df1e7e31f0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "cd1e6d02-a305-4feb-b5d5-61a3dc026180",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 12 May 2021 08:33:09 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 322
        },
        "id": "3e66d066-14fb-4f02-a8d7-a36656fa7794",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:5)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "11ea02b1-6967-4ce8-9344-7868f97dc1c6",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f72dda67-9a33-4154-aed3-85592fdebb7f"
        },
        "item": {
          "id": "176b231d-5289-4e5a-87b0-ccf96948008b",
          "name": "/PartyRole?fields=href",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "href"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "9deb424f-43da-4b0b-afe9-99be6229e630"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "href"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "61606b1e-9b73-4d05-97bd-67df498f7497",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "13e90344-20d7-4dc4-b345-ccccf2430f16",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 12 May 2021 08:33:09 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "169"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 14,
          "responseSize": 169
        },
        "id": "176b231d-5289-4e5a-87b0-ccf96948008b"
      },
      {
        "cursor": {
          "ref": "d2e5a814-c17c-4ad0-9ae0-6bdfe7b983a2",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b452262c-4a99-44c8-8c5e-5c1d83e20e35"
        },
        "item": {
          "id": "9b32a12a-8b77-4d4c-ba7a-ecafbe7b7ff0",
          "name": "/PartyRole?fields=id",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "id"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a38dac3d-3cc0-41d2-8e93-c69e2d812299"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "id"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fb7dcf0f-8356-4c2c-b3fe-548780d1621e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "684348f3-e3e9-41f5-b9b8-9a8de8ecb6c7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 12 May 2021 08:33:09 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "169"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 14,
          "responseSize": 169
        },
        "id": "9b32a12a-8b77-4d4c-ba7a-ecafbe7b7ff0"
      },
      {
        "cursor": {
          "ref": "ea4de5a9-022d-4bb2-8bc9-ba86cea80afc",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a7b3e312-4f5c-4f29-bf7f-af5e2f9ca12b"
        },
        "item": {
          "id": "413e6fd3-1641-4805-b0c9-8d1e7c967eaf",
          "name": "/PartyRole?id={{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{IDPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "029515de-82a5-46e7-8a52-1558a38c1d6e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c87efe9a-4ea4-4d3d-a744-3019cc251788",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a7730442-e29a-4566-a57e-36654b0691c8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 12 May 2021 08:33:09 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 12,
          "responseSize": 322
        },
        "id": "413e6fd3-1641-4805-b0c9-8d1e7c967eaf",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:8)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "98fe6d60-f121-45e5-8f62-9600a9c30a8b",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "fa2ee9ce-d5b9-44d2-bcd9-e3aa43bcbe65"
        },
        "item": {
          "id": "791232bc-46e2-4051-8975-5ae0baf05b82",
          "name": "/PartyRole?fields=name",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "name"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "3671749f-3caa-4bba-b0c5-0e2305f2438d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "name"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1eaac58a-2c24-4e68-a2d8-3a6a47cd75b6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6fdd9b71-d8ed-43bd-8d90-cbe22bb70da0",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 12 May 2021 08:33:10 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "184"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 184
        },
        "id": "791232bc-46e2-4051-8975-5ae0baf05b82"
      },
      {
        "cursor": {
          "ref": "2d4e7ae9-e0d3-44d2-a2ef-8375d6cc10ec",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "579cf1ec-1bd6-447f-9987-939134820e89"
        },
        "item": {
          "id": "038f7dd0-a4ea-4b70-9b02-65aa6543dafc",
          "name": "/PartyRole?name={{NAMEPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{NAMEPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "b6ecf68c-ef30-4dba-8bbb-c63e96109eec"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "name",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fb286b96-e423-4588-9286-4692ab7f120c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "37aad1e7-921c-4ee6-a200-4f439deb1bb5",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 12 May 2021 08:33:10 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 17,
          "responseSize": 322
        },
        "id": "038f7dd0-a4ea-4b70-9b02-65aa6543dafc",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:10)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4945b08c-6bf3-4e45-a759-0c496342680a",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "849beabc-541d-48ed-8709-88958be67da4"
        },
        "item": {
          "id": "19618721-ef84-4723-a76a-cce857df936c",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f653783a-0aea-44d0-a163-6934b140c585",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "8112a3b5-2a8e-45ed-8ddb-ef1b81ee9288"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "232e7047-6cbd-4059-87b8-b2ea82e59388",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 64,
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
          }
        },
        "response": {
          "id": "591151da-de1d-4afc-b1e4-21905be833c3",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 12 May 2021 08:33:10 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "1536"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Allow",
              "value": "GET, POST"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'none'"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              60,
              104,
              116,
              109,
              108,
              32,
              108,
              97,
              110,
              103,
              61,
              34,
              101,
              110,
              34,
              62,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              109,
              101,
              116,
              97,
              32,
              99,
              104,
              97,
              114,
              115,
              101,
              116,
              61,
              34,
              117,
              116,
              102,
              45,
              56,
              34,
              62,
              10,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              112,
              114,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              82,
              111,
              117,
              116,
              101,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              105,
              110,
              32,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              40,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              41,
              32,
              98,
              117,
              116,
              32,
              116,
              104,
              101,
              114,
              101,
              32,
              105,
              115,
              32,
              110,
              111,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              112,
              97,
              116,
              99,
              104,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              46,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              101,
              110,
              100,
              52,
              48,
              53,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              114,
              111,
              117,
              116,
              101,
              114,
              46,
              106,
              115,
              58,
              51,
              48,
              54,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              82,
              111,
              117,
              116,
              101,
              114,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              114,
              111,
              117,
              116,
              101,
              114,
              46,
              106,
              115,
              58,
              52,
              50,
              49,
              58,
              49,
              54,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              52,
              56,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              111,
              114,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              111,
              114,
              46,
              106,
              115,
              58,
              51,
              55,
              49,
              58,
              49,
              52,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              46,
              106,
              115,
              58,
              52,
              53,
              48,
              58,
              49,
              52,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              54,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              46,
              97,
              112,
              112,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              53,
              49,
              58,
              51,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              46,
              101,
              109,
              105,
              116,
              32,
              40,
              101,
              118,
              101,
              110,
              116,
              115,
              46,
              106,
              115,
              58,
              49,
              57,
              56,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              112,
              97,
              114,
              115,
              101,
              114,
              79,
              110,
              73,
              110,
              99,
              111,
              109,
              105,
              110,
              103,
              32,
              40,
              95,
              104,
              116,
              116,
              112,
              95,
              115,
              101,
              114,
              118,
              101,
              114,
              46,
              106,
              115,
              58,
              54,
              57,
              49,
              58,
              49,
              50,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              72,
              84,
              84,
              80,
              80,
              97,
              114,
              115,
              101,
              114,
              46,
              112,
              97,
              114,
              115,
              101,
              114,
              79,
              110,
              72,
              101,
              97,
              100,
              101,
              114,
              115,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              40,
              95,
              104,
              116,
              116,
              112,
              95,
              99,
              111,
              109,
              109,
              111,
              110,
              46,
              106,
              115,
              58,
              49,
              49,
              49,
              58,
              49,
              55,
              41,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 1536
        },
        "id": "19618721-ef84-4723-a76a-cce857df936c",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 405",
              "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "878accc6-d43d-4be9-9453-d21e5feacaa2",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c80986df-3fbf-4263-be96-bacb6f30c162"
        },
        "item": {
          "id": "94fb3c2f-f825-47bd-ab93-00e6c00af616",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "       ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "a955d718-c846-4035-984f-cea60e48b75d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3916c943-88ad-452e-8523-74674cede4b0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "45485a34-9de0-4178-9c29-1cdd8a8dc5f4",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 12 May 2021 08:33:10 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 12,
          "responseSize": 322
        },
        "id": "94fb3c2f-f825-47bd-ab93-00e6c00af616",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:12)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "252c3300-43c3-4804-804d-be232857aee1",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "702a9b9e-bed3-4f73-9558-f3aa13bf8023"
        },
        "item": {
          "id": "cf2bddfc-a970-4c6b-a485-66a65887ae78",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "2dfd0e11-684e-4217-becd-564fd5f01f76"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "41e1e813-7996-4742-9486-ccaa8ec671f9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "6fea27be-5a54-447c-acb6-28df6fc319f3",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 12 May 2021 08:33:10 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "1537"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Allow",
              "value": "GET, POST"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'none'"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              60,
              104,
              116,
              109,
              108,
              32,
              108,
              97,
              110,
              103,
              61,
              34,
              101,
              110,
              34,
              62,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              109,
              101,
              116,
              97,
              32,
              99,
              104,
              97,
              114,
              115,
              101,
              116,
              61,
              34,
              117,
              116,
              102,
              45,
              56,
              34,
              62,
              10,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              112,
              114,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              82,
              111,
              117,
              116,
              101,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              105,
              110,
              32,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              40,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              41,
              32,
              98,
              117,
              116,
              32,
              116,
              104,
              101,
              114,
              101,
              32,
              105,
              115,
              32,
              110,
              111,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              46,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              101,
              110,
              100,
              52,
              48,
              53,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              114,
              111,
              117,
              116,
              101,
              114,
              46,
              106,
              115,
              58,
              51,
              48,
              54,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              82,
              111,
              117,
              116,
              101,
              114,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              114,
              111,
              117,
              116,
              101,
              114,
              46,
              106,
              115,
              58,
              52,
              50,
              49,
              58,
              49,
              54,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              52,
              56,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              111,
              114,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              111,
              114,
              46,
              106,
              115,
              58,
              51,
              55,
              49,
              58,
              49,
              52,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              46,
              106,
              115,
              58,
              52,
              53,
              48,
              58,
              49,
              52,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              54,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              46,
              97,
              112,
              112,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              53,
              49,
              58,
              51,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              46,
              101,
              109,
              105,
              116,
              32,
              40,
              101,
              118,
              101,
              110,
              116,
              115,
              46,
              106,
              115,
              58,
              49,
              57,
              56,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              112,
              97,
              114,
              115,
              101,
              114,
              79,
              110,
              73,
              110,
              99,
              111,
              109,
              105,
              110,
              103,
              32,
              40,
              95,
              104,
              116,
              116,
              112,
              95,
              115,
              101,
              114,
              118,
              101,
              114,
              46,
              106,
              115,
              58,
              54,
              57,
              49,
              58,
              49,
              50,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              72,
              84,
              84,
              80,
              80,
              97,
              114,
              115,
              101,
              114,
              46,
              112,
              97,
              114,
              115,
              101,
              114,
              79,
              110,
              72,
              101,
              97,
              100,
              101,
              114,
              115,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              40,
              95,
              104,
              116,
              116,
              112,
              95,
              99,
              111,
              109,
              109,
              111,
              110,
              46,
              106,
              115,
              58,
              49,
              49,
              49,
              58,
              49,
              55,
              41,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 1537
        },
        "id": "cf2bddfc-a970-4c6b-a485-66a65887ae78",
        "assertions": [
          {
            "assertion": "Status code is 204",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 204",
              "message": "expected response to have status code 204 but got 405",
              "stack": "AssertionError: expected response to have status code 204 but got 405\n   at Object.eval sandbox-script.js:1:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0548071c-c52c-47ca-affd-311c13169fd9",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "de21b4b5-305c-46e0-89c2-c81540fbf538"
        },
        "item": {
          "id": "da01a5be-cf8f-4cb6-87fd-94c923da48b3",
          "name": "/PartyRole/404ID",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  ""
                ],
                "_lastExecutionId": "5aaaaecb-5601-4101-84e8-c715e0ceb113"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "548a75bd-a19a-4c98-a0b2-c0f92586dbad",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "8bc3a8ef-b164-4e81-9110-2a490d74a6ca",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 12 May 2021 08:33:10 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 322
        },
        "id": "da01a5be-cf8f-4cb6-87fd-94c923da48b3",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d946984f-953b-41e3-80d3-81a4c2992430",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a950f053-5ce2-4e35-8c82-677544d8d58e"
        },
        "item": {
          "id": "c8b6dfe0-beb6-4a10-8282-f68574b91202",
          "name": "/PartyRole/404ID",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "b00cb440-e863-440b-a36f-74a296e06578"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "31e73c55-4701-4c8d-b7ad-bcdaf4118421",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  ""
                ],
                "_lastExecutionId": "e3f07b8f-4e62-4878-8559-e7cd35991c10"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              "b00cb440-e863-440b-a36f-74a296e06578"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "134b822c-adef-4576-8564-cee599ddc946",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e170f2b5-901b-4386-a86c-75496c23041c",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 12 May 2021 08:33:10 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "85"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              54,
              48,
              44,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              103,
              105,
              118,
              101,
              110,
              32,
              105,
              100,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 85
        },
        "id": "c8b6dfe0-beb6-4a10-8282-f68574b91202",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 6215
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201",
          "message": "expected response to have status code 201 but got 400",
          "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "07f314d63800094e22e662fde7069e53",
          "id": "f742cbfe-64cc-4f6c-8b14-85347fce11ac",
          "timestamp": 1620808389203,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
              }
            }
          ]
        },
        "parent": {
          "id": "2f8f6389-3680-4f93-8a08-9f0c2a9e4a08",
          "name": "N1",
          "item": [
            {
              "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
                  }
                }
              ]
            },
            {
              "id": "b7102ad9-7aac-421b-9d68-41873e6a4b71",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "28bef6b4-b09c-425b-9490-a50537f0ad39"
                  }
                }
              ]
            },
            {
              "id": "c5638e7d-6ebf-470e-8ab2-464294638721",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "abcda252-af04-4dc6-a6bb-adb86486a842"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "14b16c9a-f785-487e-93ec-1ca6ce6cba17",
          "httpRequestId": "aef5ece3-dd08-4142-afdb-3eedff2af99f",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "329a6670-1b33-410c-96a3-0912438d215a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ 'code', 'reason', 'message' ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ 'code', 'reason', 'message' ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "0592536d04ac74329436d34710fa27aa",
          "id": "40e9b898-074f-4a27-9912-df1f98f73f78",
          "timestamp": 1620808389207,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
              }
            }
          ]
        },
        "parent": {
          "id": "2f8f6389-3680-4f93-8a08-9f0c2a9e4a08",
          "name": "N1",
          "item": [
            {
              "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
                  }
                }
              ]
            },
            {
              "id": "b7102ad9-7aac-421b-9d68-41873e6a4b71",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "28bef6b4-b09c-425b-9490-a50537f0ad39"
                  }
                }
              ]
            },
            {
              "id": "c5638e7d-6ebf-470e-8ab2-464294638721",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "abcda252-af04-4dc6-a6bb-adb86486a842"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "14b16c9a-f785-487e-93ec-1ca6ce6cba17",
          "httpRequestId": "aef5ece3-dd08-4142-afdb-3eedff2af99f",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "329a6670-1b33-410c-96a3-0912438d215a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response has name attribute",
          "message": "expected undefined to be a string",
          "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:3:1)",
          "checksum": "467da55d0af94b10370bf67335cff3be",
          "id": "6c9ae273-d998-4739-911c-c2729921be03",
          "timestamp": 1620808389208,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
              }
            }
          ]
        },
        "parent": {
          "id": "2f8f6389-3680-4f93-8a08-9f0c2a9e4a08",
          "name": "N1",
          "item": [
            {
              "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
                  }
                }
              ]
            },
            {
              "id": "b7102ad9-7aac-421b-9d68-41873e6a4b71",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "28bef6b4-b09c-425b-9490-a50537f0ad39"
                  }
                }
              ]
            },
            {
              "id": "c5638e7d-6ebf-470e-8ab2-464294638721",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "abcda252-af04-4dc6-a6bb-adb86486a842"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "14b16c9a-f785-487e-93ec-1ca6ce6cba17",
          "httpRequestId": "aef5ece3-dd08-4142-afdb-3eedff2af99f",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "329a6670-1b33-410c-96a3-0912438d215a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Response has href attribute",
          "message": "expected undefined to be a string",
          "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:4:1)",
          "checksum": "d14566ad7a15bdf1547ee1ecf2523906",
          "id": "e35ed9fd-ce60-4da1-b6f1-0db8eab85d90",
          "timestamp": 1620808389209,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
              }
            }
          ]
        },
        "parent": {
          "id": "2f8f6389-3680-4f93-8a08-9f0c2a9e4a08",
          "name": "N1",
          "item": [
            {
              "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
                  }
                }
              ]
            },
            {
              "id": "b7102ad9-7aac-421b-9d68-41873e6a4b71",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "28bef6b4-b09c-425b-9490-a50537f0ad39"
                  }
                }
              ]
            },
            {
              "id": "c5638e7d-6ebf-470e-8ab2-464294638721",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "abcda252-af04-4dc6-a6bb-adb86486a842"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "14b16c9a-f785-487e-93ec-1ca6ce6cba17",
          "httpRequestId": "aef5ece3-dd08-4142-afdb-3eedff2af99f",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "329a6670-1b33-410c-96a3-0912438d215a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 4,
          "test": "Response has id attribute",
          "message": "expected undefined to be a string",
          "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:5:1)",
          "checksum": "b42b42fce085f4fe6ea372f210e0fed7",
          "id": "12a33eb4-87a6-4a06-9919-1c9331a60924",
          "timestamp": 1620808389210,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
              }
            }
          ]
        },
        "parent": {
          "id": "2f8f6389-3680-4f93-8a08-9f0c2a9e4a08",
          "name": "N1",
          "item": [
            {
              "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
                  }
                }
              ]
            },
            {
              "id": "b7102ad9-7aac-421b-9d68-41873e6a4b71",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "28bef6b4-b09c-425b-9490-a50537f0ad39"
                  }
                }
              ]
            },
            {
              "id": "c5638e7d-6ebf-470e-8ab2-464294638721",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "abcda252-af04-4dc6-a6bb-adb86486a842"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "14b16c9a-f785-487e-93ec-1ca6ce6cba17",
          "httpRequestId": "aef5ece3-dd08-4142-afdb-3eedff2af99f",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "329a6670-1b33-410c-96a3-0912438d215a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 5,
          "test": "Response has name attribute",
          "message": "expected undefined to be a string",
          "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:6:1)",
          "checksum": "67022e7602f1d0567d07dd3b41940326",
          "id": "370a72c4-e8ec-45da-ac2c-4b2e97da58c1",
          "timestamp": 1620808389211,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 6,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:5 in test-script",
        "source": {
          "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
              }
            }
          ]
        },
        "parent": {
          "id": "2f8f6389-3680-4f93-8a08-9f0c2a9e4a08",
          "name": "N1",
          "item": [
            {
              "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
                  }
                }
              ]
            },
            {
              "id": "b7102ad9-7aac-421b-9d68-41873e6a4b71",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "28bef6b4-b09c-425b-9490-a50537f0ad39"
                  }
                }
              ]
            },
            {
              "id": "c5638e7d-6ebf-470e-8ab2-464294638721",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "abcda252-af04-4dc6-a6bb-adb86486a842"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "14b16c9a-f785-487e-93ec-1ca6ce6cba17",
          "httpRequestId": "aef5ece3-dd08-4142-afdb-3eedff2af99f",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "329a6670-1b33-410c-96a3-0912438d215a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 6,
          "test": "Body includes value held on name",
          "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
          "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:7:1)",
          "checksum": "8d35a9239f6eb0694e66d163ee81dc7a",
          "id": "f368c565-c710-4bbf-8777-ba9e53979758",
          "timestamp": 1620808389212,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 7,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:6 in test-script",
        "source": {
          "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
              }
            }
          ]
        },
        "parent": {
          "id": "2f8f6389-3680-4f93-8a08-9f0c2a9e4a08",
          "name": "N1",
          "item": [
            {
              "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
                  }
                }
              ]
            },
            {
              "id": "b7102ad9-7aac-421b-9d68-41873e6a4b71",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "28bef6b4-b09c-425b-9490-a50537f0ad39"
                  }
                }
              ]
            },
            {
              "id": "c5638e7d-6ebf-470e-8ab2-464294638721",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "abcda252-af04-4dc6-a6bb-adb86486a842"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "14b16c9a-f785-487e-93ec-1ca6ce6cba17",
          "httpRequestId": "aef5ece3-dd08-4142-afdb-3eedff2af99f",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "329a6670-1b33-410c-96a3-0912438d215a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 7,
          "test": "Body includes value held on href",
          "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
          "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:8:1)",
          "checksum": "637b9d0200e5fa716b3b132189aaf102",
          "id": "0f3a6652-568c-4866-b808-82a02f75f3c6",
          "timestamp": 1620808389213,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 8,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:7 in test-script",
        "source": {
          "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
              }
            }
          ]
        },
        "parent": {
          "id": "2f8f6389-3680-4f93-8a08-9f0c2a9e4a08",
          "name": "N1",
          "item": [
            {
              "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
                  }
                }
              ]
            },
            {
              "id": "b7102ad9-7aac-421b-9d68-41873e6a4b71",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "28bef6b4-b09c-425b-9490-a50537f0ad39"
                  }
                }
              ]
            },
            {
              "id": "c5638e7d-6ebf-470e-8ab2-464294638721",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "abcda252-af04-4dc6-a6bb-adb86486a842"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "14b16c9a-f785-487e-93ec-1ca6ce6cba17",
          "httpRequestId": "aef5ece3-dd08-4142-afdb-3eedff2af99f",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "329a6670-1b33-410c-96a3-0912438d215a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 8,
          "test": "Body includes value held on id",
          "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
          "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:9:1)",
          "checksum": "75406781bcd6cb8a6dd834e32f5fbcd9",
          "id": "fcf27a88-6fb8-48bf-8d52-313b20b2d877",
          "timestamp": 1620808389214,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 9,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:8 in test-script",
        "source": {
          "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
              }
            }
          ]
        },
        "parent": {
          "id": "2f8f6389-3680-4f93-8a08-9f0c2a9e4a08",
          "name": "N1",
          "item": [
            {
              "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
                  }
                }
              ]
            },
            {
              "id": "b7102ad9-7aac-421b-9d68-41873e6a4b71",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "28bef6b4-b09c-425b-9490-a50537f0ad39"
                  }
                }
              ]
            },
            {
              "id": "c5638e7d-6ebf-470e-8ab2-464294638721",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "abcda252-af04-4dc6-a6bb-adb86486a842"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "14b16c9a-f785-487e-93ec-1ca6ce6cba17",
          "httpRequestId": "aef5ece3-dd08-4142-afdb-3eedff2af99f",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "329a6670-1b33-410c-96a3-0912438d215a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 9,
          "test": "Body includes value held on name",
          "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
          "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:10:1)",
          "checksum": "3371d4647fc82c247216e721d4d7e719",
          "id": "3ce5b29a-dbc5-4762-978d-207ea7cad833",
          "timestamp": 1620808389215,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 10,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:9 in test-script",
        "source": {
          "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
              }
            }
          ]
        },
        "parent": {
          "id": "2f8f6389-3680-4f93-8a08-9f0c2a9e4a08",
          "name": "N1",
          "item": [
            {
              "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
                  }
                }
              ]
            },
            {
              "id": "b7102ad9-7aac-421b-9d68-41873e6a4b71",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "28bef6b4-b09c-425b-9490-a50537f0ad39"
                  }
                }
              ]
            },
            {
              "id": "c5638e7d-6ebf-470e-8ab2-464294638721",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "abcda252-af04-4dc6-a6bb-adb86486a842"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "14b16c9a-f785-487e-93ec-1ca6ce6cba17",
          "httpRequestId": "aef5ece3-dd08-4142-afdb-3eedff2af99f",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "329a6670-1b33-410c-96a3-0912438d215a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "4b5c6b1976c3c5d8eab21f19088e67bc",
          "id": "d0e4472f-bfd5-4f7c-9418-5df554d3a068",
          "timestamp": 1620808389307,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b7102ad9-7aac-421b-9d68-41873e6a4b71",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation search for the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                  "        }  ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                  "        }",
                  "   ",
                  "  }",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "28bef6b4-b09c-425b-9490-a50537f0ad39"
              }
            }
          ]
        },
        "parent": {
          "id": "2f8f6389-3680-4f93-8a08-9f0c2a9e4a08",
          "name": "N1",
          "item": [
            {
              "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
                  }
                }
              ]
            },
            {
              "id": "b7102ad9-7aac-421b-9d68-41873e6a4b71",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "28bef6b4-b09c-425b-9490-a50537f0ad39"
                  }
                }
              ]
            },
            {
              "id": "c5638e7d-6ebf-470e-8ab2-464294638721",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "abcda252-af04-4dc6-a6bb-adb86486a842"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "97103f64-d950-489b-8698-18db245a4ab7",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "aa9c67bd-c6fc-4aea-b89c-cea1ada95913",
          "scriptId": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
          "execution": "28bef6b4-b09c-425b-9490-a50537f0ad39"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "a0a1e6ff44f64661ee4a26a8f5bf67cc",
          "id": "5325dd6e-7b62-41d5-98e1-74f906f6796e",
          "timestamp": 1620808389418,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c5638e7d-6ebf-470e-8ab2-464294638721",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "abcda252-af04-4dc6-a6bb-adb86486a842"
              }
            }
          ]
        },
        "parent": {
          "id": "2f8f6389-3680-4f93-8a08-9f0c2a9e4a08",
          "name": "N1",
          "item": [
            {
              "id": "65113a1f-7ee7-4b65-8d58-5b3f19c63d12",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "329a6670-1b33-410c-96a3-0912438d215a"
                  }
                }
              ]
            },
            {
              "id": "b7102ad9-7aac-421b-9d68-41873e6a4b71",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "28bef6b4-b09c-425b-9490-a50537f0ad39"
                  }
                }
              ]
            },
            {
              "id": "c5638e7d-6ebf-470e-8ab2-464294638721",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "abcda252-af04-4dc6-a6bb-adb86486a842"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "8f7b1ba1-82b4-47ad-8cfc-a3969b8e663c",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "57883dbe-a05e-4229-8b9f-b2c01c179c32",
          "scriptId": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
          "execution": "abcda252-af04-4dc6-a6bb-adb86486a842"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "cada49c3645d5b70758d57cce7e1287b",
          "id": "a698eef3-93d7-4beb-a6cd-34cd1d40c625",
          "timestamp": 1620808389628,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "3e66d066-14fb-4f02-a8d7-a36656fa7794",
          "name": "/PartyRole?name={{NAMEPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{NAMEPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "47941baa-47c7-4012-a1bd-30ed17906b9e"
              }
            }
          ]
        },
        "parent": {
          "id": "28e61bb7-658e-48f1-a13f-709417c796f6",
          "name": "N2",
          "item": [
            {
              "id": "85fafcb6-a741-4f94-abd7-530cf2617d55",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "57f00ace-1c53-4836-9661-83faf173a579"
                  }
                }
              ]
            },
            {
              "id": "3e66d066-14fb-4f02-a8d7-a36656fa7794",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "47941baa-47c7-4012-a1bd-30ed17906b9e"
                  }
                }
              ]
            },
            {
              "id": "176b231d-5289-4e5a-87b0-ccf96948008b",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9deb424f-43da-4b0b-afe9-99be6229e630"
                  }
                }
              ]
            },
            {
              "id": "9b32a12a-8b77-4d4c-ba7a-ecafbe7b7ff0",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a38dac3d-3cc0-41d2-8e93-c69e2d812299"
                  }
                }
              ]
            },
            {
              "id": "413e6fd3-1641-4805-b0c9-8d1e7c967eaf",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "029515de-82a5-46e7-8a52-1558a38c1d6e"
                  }
                }
              ]
            },
            {
              "id": "791232bc-46e2-4051-8975-5ae0baf05b82",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3671749f-3caa-4bba-b0c5-0e2305f2438d"
                  }
                }
              ]
            },
            {
              "id": "038f7dd0-a4ea-4b70-9b02-65aa6543dafc",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "b6ecf68c-ef30-4dba-8bbb-c63e96109eec"
                  }
                }
              ]
            },
            {
              "id": "19618721-ef84-4723-a76a-cce857df936c",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "8112a3b5-2a8e-45ed-8ddb-ef1b81ee9288"
                  }
                }
              ]
            },
            {
              "id": "94fb3c2f-f825-47bd-ab93-00e6c00af616",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "a955d718-c846-4035-984f-cea60e48b75d"
                  }
                }
              ]
            },
            {
              "id": "cf2bddfc-a970-4c6b-a485-66a65887ae78",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "2dfd0e11-684e-4217-becd-564fd5f01f76"
                  }
                }
              ]
            },
            {
              "id": "da01a5be-cf8f-4cb6-87fd-94c923da48b3",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "5aaaaecb-5601-4101-84e8-c715e0ceb113"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "5f5f0882-eebf-46e4-b777-ab5a4fe592dc",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "86adb8e3-0118-40a3-ba21-17ebd989d56a",
          "scriptId": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
          "execution": "47941baa-47c7-4012-a1bd-30ed17906b9e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "bc19defb619c63f2d545b97aa4011709",
          "id": "cc30feb0-259e-4bb1-b191-4fb5c03c8a5e",
          "timestamp": 1620808389921,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "413e6fd3-1641-4805-b0c9-8d1e7c967eaf",
          "name": "/PartyRole?id={{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{IDPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "029515de-82a5-46e7-8a52-1558a38c1d6e"
              }
            }
          ]
        },
        "parent": {
          "id": "28e61bb7-658e-48f1-a13f-709417c796f6",
          "name": "N2",
          "item": [
            {
              "id": "85fafcb6-a741-4f94-abd7-530cf2617d55",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "57f00ace-1c53-4836-9661-83faf173a579"
                  }
                }
              ]
            },
            {
              "id": "3e66d066-14fb-4f02-a8d7-a36656fa7794",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "47941baa-47c7-4012-a1bd-30ed17906b9e"
                  }
                }
              ]
            },
            {
              "id": "176b231d-5289-4e5a-87b0-ccf96948008b",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9deb424f-43da-4b0b-afe9-99be6229e630"
                  }
                }
              ]
            },
            {
              "id": "9b32a12a-8b77-4d4c-ba7a-ecafbe7b7ff0",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a38dac3d-3cc0-41d2-8e93-c69e2d812299"
                  }
                }
              ]
            },
            {
              "id": "413e6fd3-1641-4805-b0c9-8d1e7c967eaf",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "029515de-82a5-46e7-8a52-1558a38c1d6e"
                  }
                }
              ]
            },
            {
              "id": "791232bc-46e2-4051-8975-5ae0baf05b82",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3671749f-3caa-4bba-b0c5-0e2305f2438d"
                  }
                }
              ]
            },
            {
              "id": "038f7dd0-a4ea-4b70-9b02-65aa6543dafc",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "b6ecf68c-ef30-4dba-8bbb-c63e96109eec"
                  }
                }
              ]
            },
            {
              "id": "19618721-ef84-4723-a76a-cce857df936c",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "8112a3b5-2a8e-45ed-8ddb-ef1b81ee9288"
                  }
                }
              ]
            },
            {
              "id": "94fb3c2f-f825-47bd-ab93-00e6c00af616",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "a955d718-c846-4035-984f-cea60e48b75d"
                  }
                }
              ]
            },
            {
              "id": "cf2bddfc-a970-4c6b-a485-66a65887ae78",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "2dfd0e11-684e-4217-becd-564fd5f01f76"
                  }
                }
              ]
            },
            {
              "id": "da01a5be-cf8f-4cb6-87fd-94c923da48b3",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "5aaaaecb-5601-4101-84e8-c715e0ceb113"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "ea4de5a9-022d-4bb2-8bc9-ba86cea80afc",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a7b3e312-4f5c-4f29-bf7f-af5e2f9ca12b",
          "scriptId": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
          "execution": "029515de-82a5-46e7-8a52-1558a38c1d6e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "516a59347529fef1eb7e754723fb4e6d",
          "id": "f0a4f21f-adb3-4b36-a5bf-a99d9e438c59",
          "timestamp": 1620808390123,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "038f7dd0-a4ea-4b70-9b02-65aa6543dafc",
          "name": "/PartyRole?name={{NAMEPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{NAMEPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "b6ecf68c-ef30-4dba-8bbb-c63e96109eec"
              }
            }
          ]
        },
        "parent": {
          "id": "28e61bb7-658e-48f1-a13f-709417c796f6",
          "name": "N2",
          "item": [
            {
              "id": "85fafcb6-a741-4f94-abd7-530cf2617d55",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "57f00ace-1c53-4836-9661-83faf173a579"
                  }
                }
              ]
            },
            {
              "id": "3e66d066-14fb-4f02-a8d7-a36656fa7794",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "47941baa-47c7-4012-a1bd-30ed17906b9e"
                  }
                }
              ]
            },
            {
              "id": "176b231d-5289-4e5a-87b0-ccf96948008b",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9deb424f-43da-4b0b-afe9-99be6229e630"
                  }
                }
              ]
            },
            {
              "id": "9b32a12a-8b77-4d4c-ba7a-ecafbe7b7ff0",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a38dac3d-3cc0-41d2-8e93-c69e2d812299"
                  }
                }
              ]
            },
            {
              "id": "413e6fd3-1641-4805-b0c9-8d1e7c967eaf",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "029515de-82a5-46e7-8a52-1558a38c1d6e"
                  }
                }
              ]
            },
            {
              "id": "791232bc-46e2-4051-8975-5ae0baf05b82",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3671749f-3caa-4bba-b0c5-0e2305f2438d"
                  }
                }
              ]
            },
            {
              "id": "038f7dd0-a4ea-4b70-9b02-65aa6543dafc",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "b6ecf68c-ef30-4dba-8bbb-c63e96109eec"
                  }
                }
              ]
            },
            {
              "id": "19618721-ef84-4723-a76a-cce857df936c",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "8112a3b5-2a8e-45ed-8ddb-ef1b81ee9288"
                  }
                }
              ]
            },
            {
              "id": "94fb3c2f-f825-47bd-ab93-00e6c00af616",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "a955d718-c846-4035-984f-cea60e48b75d"
                  }
                }
              ]
            },
            {
              "id": "cf2bddfc-a970-4c6b-a485-66a65887ae78",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "2dfd0e11-684e-4217-becd-564fd5f01f76"
                  }
                }
              ]
            },
            {
              "id": "da01a5be-cf8f-4cb6-87fd-94c923da48b3",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "5aaaaecb-5601-4101-84e8-c715e0ceb113"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "2d4e7ae9-e0d3-44d2-a2ef-8375d6cc10ec",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "579cf1ec-1bd6-447f-9987-939134820e89",
          "scriptId": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
          "execution": "b6ecf68c-ef30-4dba-8bbb-c63e96109eec"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 405",
          "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "a5795b37f243c7713278eb9b12c8e4c5",
          "id": "98ec306b-08a3-4062-9570-452bd8ace0ed",
          "timestamp": 1620808390216,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "19618721-ef84-4723-a76a-cce857df936c",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f653783a-0aea-44d0-a163-6934b140c585",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "8112a3b5-2a8e-45ed-8ddb-ef1b81ee9288"
              }
            }
          ]
        },
        "parent": {
          "id": "28e61bb7-658e-48f1-a13f-709417c796f6",
          "name": "N2",
          "item": [
            {
              "id": "85fafcb6-a741-4f94-abd7-530cf2617d55",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "57f00ace-1c53-4836-9661-83faf173a579"
                  }
                }
              ]
            },
            {
              "id": "3e66d066-14fb-4f02-a8d7-a36656fa7794",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "47941baa-47c7-4012-a1bd-30ed17906b9e"
                  }
                }
              ]
            },
            {
              "id": "176b231d-5289-4e5a-87b0-ccf96948008b",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9deb424f-43da-4b0b-afe9-99be6229e630"
                  }
                }
              ]
            },
            {
              "id": "9b32a12a-8b77-4d4c-ba7a-ecafbe7b7ff0",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a38dac3d-3cc0-41d2-8e93-c69e2d812299"
                  }
                }
              ]
            },
            {
              "id": "413e6fd3-1641-4805-b0c9-8d1e7c967eaf",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "029515de-82a5-46e7-8a52-1558a38c1d6e"
                  }
                }
              ]
            },
            {
              "id": "791232bc-46e2-4051-8975-5ae0baf05b82",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3671749f-3caa-4bba-b0c5-0e2305f2438d"
                  }
                }
              ]
            },
            {
              "id": "038f7dd0-a4ea-4b70-9b02-65aa6543dafc",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "b6ecf68c-ef30-4dba-8bbb-c63e96109eec"
                  }
                }
              ]
            },
            {
              "id": "19618721-ef84-4723-a76a-cce857df936c",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "8112a3b5-2a8e-45ed-8ddb-ef1b81ee9288"
                  }
                }
              ]
            },
            {
              "id": "94fb3c2f-f825-47bd-ab93-00e6c00af616",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "a955d718-c846-4035-984f-cea60e48b75d"
                  }
                }
              ]
            },
            {
              "id": "cf2bddfc-a970-4c6b-a485-66a65887ae78",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "2dfd0e11-684e-4217-becd-564fd5f01f76"
                  }
                }
              ]
            },
            {
              "id": "da01a5be-cf8f-4cb6-87fd-94c923da48b3",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "5aaaaecb-5601-4101-84e8-c715e0ceb113"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "4945b08c-6bf3-4e45-a759-0c496342680a",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "849beabc-541d-48ed-8709-88958be67da4",
          "scriptId": "f653783a-0aea-44d0-a163-6934b140c585",
          "execution": "8112a3b5-2a8e-45ed-8ddb-ef1b81ee9288"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "71f79b0d5a8f0583269da176b5578e5f",
          "id": "c53715e0-4322-458c-96d6-722ff2e30aca",
          "timestamp": 1620808390309,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "94fb3c2f-f825-47bd-ab93-00e6c00af616",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "       ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "a955d718-c846-4035-984f-cea60e48b75d"
              }
            }
          ]
        },
        "parent": {
          "id": "28e61bb7-658e-48f1-a13f-709417c796f6",
          "name": "N2",
          "item": [
            {
              "id": "85fafcb6-a741-4f94-abd7-530cf2617d55",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "57f00ace-1c53-4836-9661-83faf173a579"
                  }
                }
              ]
            },
            {
              "id": "3e66d066-14fb-4f02-a8d7-a36656fa7794",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "47941baa-47c7-4012-a1bd-30ed17906b9e"
                  }
                }
              ]
            },
            {
              "id": "176b231d-5289-4e5a-87b0-ccf96948008b",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9deb424f-43da-4b0b-afe9-99be6229e630"
                  }
                }
              ]
            },
            {
              "id": "9b32a12a-8b77-4d4c-ba7a-ecafbe7b7ff0",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a38dac3d-3cc0-41d2-8e93-c69e2d812299"
                  }
                }
              ]
            },
            {
              "id": "413e6fd3-1641-4805-b0c9-8d1e7c967eaf",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "029515de-82a5-46e7-8a52-1558a38c1d6e"
                  }
                }
              ]
            },
            {
              "id": "791232bc-46e2-4051-8975-5ae0baf05b82",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3671749f-3caa-4bba-b0c5-0e2305f2438d"
                  }
                }
              ]
            },
            {
              "id": "038f7dd0-a4ea-4b70-9b02-65aa6543dafc",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "b6ecf68c-ef30-4dba-8bbb-c63e96109eec"
                  }
                }
              ]
            },
            {
              "id": "19618721-ef84-4723-a76a-cce857df936c",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "8112a3b5-2a8e-45ed-8ddb-ef1b81ee9288"
                  }
                }
              ]
            },
            {
              "id": "94fb3c2f-f825-47bd-ab93-00e6c00af616",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "a955d718-c846-4035-984f-cea60e48b75d"
                  }
                }
              ]
            },
            {
              "id": "cf2bddfc-a970-4c6b-a485-66a65887ae78",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "2dfd0e11-684e-4217-becd-564fd5f01f76"
                  }
                }
              ]
            },
            {
              "id": "da01a5be-cf8f-4cb6-87fd-94c923da48b3",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "5aaaaecb-5601-4101-84e8-c715e0ceb113"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "878accc6-d43d-4be9-9453-d21e5feacaa2",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c80986df-3fbf-4263-be96-bacb6f30c162",
          "scriptId": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
          "execution": "a955d718-c846-4035-984f-cea60e48b75d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 204",
          "message": "expected response to have status code 204 but got 405",
          "stack": "AssertionError: expected response to have status code 204 but got 405\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "c248c7326ad3a680ca57953e6b3c2acf",
          "id": "f5a2a276-de7d-4804-ae5f-5a52b911ed85",
          "timestamp": 1620808390402,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "cf2bddfc-a970-4c6b-a485-66a65887ae78",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "2dfd0e11-684e-4217-becd-564fd5f01f76"
              }
            }
          ]
        },
        "parent": {
          "id": "28e61bb7-658e-48f1-a13f-709417c796f6",
          "name": "N2",
          "item": [
            {
              "id": "85fafcb6-a741-4f94-abd7-530cf2617d55",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "57f00ace-1c53-4836-9661-83faf173a579"
                  }
                }
              ]
            },
            {
              "id": "3e66d066-14fb-4f02-a8d7-a36656fa7794",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "47941baa-47c7-4012-a1bd-30ed17906b9e"
                  }
                }
              ]
            },
            {
              "id": "176b231d-5289-4e5a-87b0-ccf96948008b",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9deb424f-43da-4b0b-afe9-99be6229e630"
                  }
                }
              ]
            },
            {
              "id": "9b32a12a-8b77-4d4c-ba7a-ecafbe7b7ff0",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a38dac3d-3cc0-41d2-8e93-c69e2d812299"
                  }
                }
              ]
            },
            {
              "id": "413e6fd3-1641-4805-b0c9-8d1e7c967eaf",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "029515de-82a5-46e7-8a52-1558a38c1d6e"
                  }
                }
              ]
            },
            {
              "id": "791232bc-46e2-4051-8975-5ae0baf05b82",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3671749f-3caa-4bba-b0c5-0e2305f2438d"
                  }
                }
              ]
            },
            {
              "id": "038f7dd0-a4ea-4b70-9b02-65aa6543dafc",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "b6ecf68c-ef30-4dba-8bbb-c63e96109eec"
                  }
                }
              ]
            },
            {
              "id": "19618721-ef84-4723-a76a-cce857df936c",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "8112a3b5-2a8e-45ed-8ddb-ef1b81ee9288"
                  }
                }
              ]
            },
            {
              "id": "94fb3c2f-f825-47bd-ab93-00e6c00af616",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "a955d718-c846-4035-984f-cea60e48b75d"
                  }
                }
              ]
            },
            {
              "id": "cf2bddfc-a970-4c6b-a485-66a65887ae78",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "2dfd0e11-684e-4217-becd-564fd5f01f76"
                  }
                }
              ]
            },
            {
              "id": "da01a5be-cf8f-4cb6-87fd-94c923da48b3",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "5aaaaecb-5601-4101-84e8-c715e0ceb113"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "252c3300-43c3-4804-804d-be232857aee1",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "702a9b9e-bed3-4f73-9558-f3aa13bf8023",
          "scriptId": "396d389e-c29c-4f93-a7b4-41e2c728886b",
          "execution": "2dfd0e11-684e-4217-becd-564fd5f01f76"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 404",
          "message": "expected response to have status code 404 but got 200",
          "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "d13d7d573ac6ef4ce79925080d6d7aa1",
          "id": "f0ddd6fd-1bcf-46ff-8213-26ea85393f8b",
          "timestamp": 1620808390498,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "da01a5be-cf8f-4cb6-87fd-94c923da48b3",
          "name": "/PartyRole/404ID",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  ""
                ],
                "_lastExecutionId": "5aaaaecb-5601-4101-84e8-c715e0ceb113"
              }
            }
          ]
        },
        "parent": {
          "id": "28e61bb7-658e-48f1-a13f-709417c796f6",
          "name": "N2",
          "item": [
            {
              "id": "85fafcb6-a741-4f94-abd7-530cf2617d55",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "57f00ace-1c53-4836-9661-83faf173a579"
                  }
                }
              ]
            },
            {
              "id": "3e66d066-14fb-4f02-a8d7-a36656fa7794",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "47941baa-47c7-4012-a1bd-30ed17906b9e"
                  }
                }
              ]
            },
            {
              "id": "176b231d-5289-4e5a-87b0-ccf96948008b",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9deb424f-43da-4b0b-afe9-99be6229e630"
                  }
                }
              ]
            },
            {
              "id": "9b32a12a-8b77-4d4c-ba7a-ecafbe7b7ff0",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a38dac3d-3cc0-41d2-8e93-c69e2d812299"
                  }
                }
              ]
            },
            {
              "id": "413e6fd3-1641-4805-b0c9-8d1e7c967eaf",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "029515de-82a5-46e7-8a52-1558a38c1d6e"
                  }
                }
              ]
            },
            {
              "id": "791232bc-46e2-4051-8975-5ae0baf05b82",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "3671749f-3caa-4bba-b0c5-0e2305f2438d"
                  }
                }
              ]
            },
            {
              "id": "038f7dd0-a4ea-4b70-9b02-65aa6543dafc",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "b6ecf68c-ef30-4dba-8bbb-c63e96109eec"
                  }
                }
              ]
            },
            {
              "id": "19618721-ef84-4723-a76a-cce857df936c",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "8112a3b5-2a8e-45ed-8ddb-ef1b81ee9288"
                  }
                }
              ]
            },
            {
              "id": "94fb3c2f-f825-47bd-ab93-00e6c00af616",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "a955d718-c846-4035-984f-cea60e48b75d"
                  }
                }
              ]
            },
            {
              "id": "cf2bddfc-a970-4c6b-a485-66a65887ae78",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "2dfd0e11-684e-4217-becd-564fd5f01f76"
                  }
                }
              ]
            },
            {
              "id": "da01a5be-cf8f-4cb6-87fd-94c923da48b3",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "5aaaaecb-5601-4101-84e8-c715e0ceb113"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "0548071c-c52c-47ca-affd-311c13169fd9",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "de21b4b5-305c-46e0-89c2-c81540fbf538",
          "scriptId": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
          "execution": "5aaaaecb-5601-4101-84e8-c715e0ceb113"
        }
      }
    ],
    "error": null
  }
}