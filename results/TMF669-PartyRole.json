{
  "collection": {
    "_": {
      "postman_id": "e39e338d-0fc5-45b5-94af-8c5ad4d815a8"
    },
    "item": [
      {
        "id": "b8023832-bd79-471d-b6d7-8ca5e8c33f63",
        "name": "N1",
        "item": [
          {
            "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
            "name": "/PartyRole",
            "request": {
              "description": {
                "content": "This operation creates a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                  "type": "text/javascript",
                  "exec": [
                    "var jsonData = pm.response.json();",
                    "",
                    "if (Array.isArray(jsonData)) { ",
                    "  ",
                    "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                    "  ",
                    "",
                    "}",
                    "",
                    "pm.test(\"Status code is 201\", function () {",
                    "  pm.response.to.have.status(201);",
                    "});",
                    "",
                    "var instance = pm.response.json();",
                    "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "",
                    "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "",
                    "",
                    "",
                    "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "",
                    "pm.globals.set('HREFPR01', instance['href']);",
                    "pm.globals.set('IDPR01', instance['id']);",
                    "pm.globals.set('NAMEPR01', instance['name']);",
                    "",
                    "pm.test('Body includes value held on name', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['name']);",
                    "});",
                    "pm.test('Body includes value held on href', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['href']);",
                    "});",
                    "pm.test('Body includes value held on id', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['id']);",
                    "});",
                    "pm.test('Body includes value held on name', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['name']);",
                    "});",
                    ""
                  ],
                  "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
                }
              }
            ]
          },
          {
            "id": "86448252-4c44-4e62-a179-846ea6f68747",
            "name": "/PartyRole",
            "request": {
              "description": {
                "content": "This operation search for the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                    "        }  ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                    "        }",
                    "   ",
                    "  }",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "195c38c5-0481-4370-ada4-bc4031a8919b"
                }
              }
            ]
          },
          {
            "id": "7e4c6f62-1887-472b-ad1f-98ca925be67b",
            "name": "/PartyRole/{{IDPR01}}",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDPR01}}"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "aae5e153-89f6-4514-9cf1-339b0ca25a3a"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "id": "132e4826-d5df-49c7-9415-47600b9e20c2",
        "name": "N2",
        "item": [
          {
            "id": "0640d2b5-b898-4397-b996-693a2bff736e",
            "name": "/PartyRole?fields=name",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "name"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4f21c2d2-260b-4a40-b573-a1fcaf855442"
                }
              }
            ]
          },
          {
            "id": "903ac34d-11c6-4a21-b2b8-379bd7400c24",
            "name": "/PartyRole?name={{NAMEPR01}}",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "name",
                    "value": "{{NAMEPR01}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "365ac853-d032-4454-92f3-a059da08c046"
                }
              }
            ]
          },
          {
            "id": "bf7876c6-e59a-4b8d-b0e4-bf1b6632e7f3",
            "name": "/PartyRole?fields=href",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "href"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f91cd89c-cee8-4888-a07a-38cdcf2a3fc9"
                }
              }
            ]
          },
          {
            "id": "7821e58d-ca5d-43ff-870c-d3f8fdb1b866",
            "name": "/PartyRole?fields=id",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "id"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "42934205-1c50-4f22-8e75-f4b93f0b93d6"
                }
              }
            ]
          },
          {
            "id": "2f727746-e22c-4a5d-9718-5437c75fd714",
            "name": "/PartyRole?id={{IDPR01}}",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{IDPR01}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "64930571-2f88-4663-b11f-2511ab437922"
                }
              }
            ]
          },
          {
            "id": "2c2039c9-5e79-4c0a-a89d-bd17f357616d",
            "name": "/PartyRole?fields=name",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "name"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2f1939b4-bd45-4c57-9e80-74d1e1a03be7"
                }
              }
            ]
          },
          {
            "id": "fd7338a8-2628-449d-a663-4477bd5ad771",
            "name": "/PartyRole?name={{NAMEPR01}}",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "name",
                    "value": "{{NAMEPR01}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "482b4783-c816-45be-88b4-c91c7e75c408"
                }
              }
            ]
          },
          {
            "id": "d60cc903-3a5c-43c3-9ba9-dbf77abcdcc5",
            "name": "/PartyRole/{{IDPR01}}",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDPR01}}"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f653783a-0aea-44d0-a163-6934b140c585",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "3b5188e8-91a3-4990-b7cc-0cb72e7f16b9"
                }
              }
            ]
          },
          {
            "id": "f95857ec-d434-49cd-a349-e4e3aa140afc",
            "name": "/PartyRole/{{IDPR01}}",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDPR01}}"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "       ",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "cd9c95b7-1d97-4a1d-903e-3de1d9f6e917"
                }
              }
            ]
          },
          {
            "id": "ef6c3c38-5d30-474b-8140-385c55d35f65",
            "name": "/PartyRole/{{IDPR01}}",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDPR01}}"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 204\", function () {",
                    "    pm.response.to.have.status(204);",
                    "});",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "b1d24776-3798-40bf-8e8d-d26e46f4cb2e"
                }
              }
            ]
          },
          {
            "id": "cd0054ac-5a17-4c34-93ef-0b6a470724f1",
            "name": "/PartyRole/404ID",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDPR01}}"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 404\", function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "af68f5ab-e1d5-4b4a-9a67-0c576cc1c401"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "id": "1c423b56-4dc7-4117-a077-de1341a84937",
        "name": "E1",
        "item": [
          {
            "id": "48380757-5bb6-4b86-b649-0cde44cfab14",
            "name": "/PartyRole/404ID",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "b00cb440-e863-440b-a36f-74a296e06578"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "31e73c55-4701-4c8d-b7ad-bcdaf4118421",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 404\", function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "14cdf898-735f-4c63-9d13-76ff0da32f1f"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      }
    ],
    "event": [],
    "protocolProfileBehavior": {},
    "variable": [],
    "info": {
      "_postman_id": "e39e338d-0fc5-45b5-94af-8c5ad4d815a8",
      "name": "CTK-Party_Role-4.0.0",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2020-07-07T14:17:10.805Z",
      "postman_exported_using": "Postman/7.27.1"
    },
    "id": "da32588a-3916-4d78-a546-7623e391f650",
    "name": "TMForumv4",
    "values": [
      {
        "type": "any",
        "value": "http://localhost/r1-productcatalog/tmf-api/partyRoleManagement/v4/",
        "key": "Party_Role"
      }
    ]
  },
  "globals": {
    "id": "9ce69370-7333-466b-91ad-a534f341a01c",
    "values": [
      {
        "type": "any",
        "value": null,
        "key": "HREFPR01"
      },
      {
        "type": "any",
        "value": null,
        "key": "IDPR01"
      },
      {
        "type": "any",
        "value": null,
        "key": "NAMEPR01"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 74,
        "pending": 0,
        "failed": 19
      },
      "testScripts": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 19.666666666666668,
      "responseMin": 9,
      "responseMax": 63,
      "responseSd": 13.174048563579673,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1620740902086,
      "completed": 1620740903757
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b7dc622d-1b23-49a6-b49d-616d3cd422bd",
          "httpRequestId": "4d7396d9-dff3-4574-9e2d-cdc5f33de13b"
        },
        "item": {
          "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation creates a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "262f352a-f988-4f47-a584-f2de1e2fc5af",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 35,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
          }
        },
        "response": {
          "id": "971a639d-0b30-4790-a2ab-98c50de3d533",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 13:48:22 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "97"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              50,
              52,
              44,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              98,
              111,
              100,
              121,
              32,
              102,
              105,
              101,
              108,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              58,
              32,
              114,
              111,
              108,
              101,
              84,
              121,
              112,
              101,
              32,
              110,
              111,
              116,
              32,
              97,
              108,
              108,
              111,
              119,
              101,
              100,
              32,
              105,
              110,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 63,
          "responseSize": 97
        },
        "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ 'code', 'reason', 'message' ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ 'code', 'reason', 'message' ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response has name attribute",
              "message": "expected undefined to be a string",
              "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:3:1)"
            }
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Response has href attribute",
              "message": "expected undefined to be a string",
              "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:4:1)"
            }
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "Response has id attribute",
              "message": "expected undefined to be a string",
              "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:5:1)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 5,
              "test": "Response has name attribute",
              "message": "expected undefined to be a string",
              "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:6:1)"
            }
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 6,
              "test": "Body includes value held on name",
              "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
              "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:7:1)"
            }
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 7,
              "test": "Body includes value held on href",
              "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
              "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:8:1)"
            }
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 8,
              "test": "Body includes value held on id",
              "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
              "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:9:1)"
            }
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 9,
              "test": "Body includes value held on name",
              "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
              "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:10:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7c8094ed-e87f-499e-bd95-9673d6e08875",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fdd55495-4dec-41cb-9509-e79ad2b99ec1"
        },
        "item": {
          "id": "86448252-4c44-4e62-a179-846ea6f68747",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation search for the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                  "        }  ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                  "        }",
                  "   ",
                  "  }",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "195c38c5-0481-4370-ada4-bc4031a8919b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a1176e5f-f8f0-4860-955f-40512a1d6457",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "bfe0db06-f5ff-46c6-a607-b6ae5a10b7f1",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 13:48:22 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 25,
          "responseSize": 322
        },
        "id": "86448252-4c44-4e62-a179-846ea6f68747",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9f7a6284-26ac-4d33-8179-98d902f2e959",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "98f1c773-d1cb-4b94-b914-eaf13ea28927"
        },
        "item": {
          "id": "7e4c6f62-1887-472b-ad1f-98ca925be67b",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "aae5e153-89f6-4514-9cf1-339b0ca25a3a"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2ce280d6-7ee2-4874-9102-72d9eed609b2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e7807324-35cf-42a5-ae7e-0d20f806031b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 13:48:22 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 322
        },
        "id": "7e4c6f62-1887-472b-ad1f-98ca925be67b",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:3)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "702815d6-0c3c-45b1-9877-8928ca834b9a",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "68a54dc7-0762-467c-90b3-cea9f7757861"
        },
        "item": {
          "id": "0640d2b5-b898-4397-b996-693a2bff736e",
          "name": "/PartyRole?fields=name",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "name"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "4f21c2d2-260b-4a40-b573-a1fcaf855442"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "name"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "25b3073d-6c12-4892-bb8e-9c2117d3a323",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a6dd3b3d-06a4-4b8f-ba3c-933333469d11",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 13:48:22 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "184"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 14,
          "responseSize": 184
        },
        "id": "0640d2b5-b898-4397-b996-693a2bff736e"
      },
      {
        "cursor": {
          "ref": "5b39599a-1d89-484a-a2e7-ebb729d343f4",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8181dc20-a9de-460d-a9da-d67284dc12ad"
        },
        "item": {
          "id": "903ac34d-11c6-4a21-b2b8-379bd7400c24",
          "name": "/PartyRole?name={{NAMEPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{NAMEPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "365ac853-d032-4454-92f3-a059da08c046"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "name",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "da5cfb4d-6311-40de-84a0-2d94f8734712",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ce971294-2cb3-480e-835c-c773ff437839",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 13:48:22 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 12,
          "responseSize": 322
        },
        "id": "903ac34d-11c6-4a21-b2b8-379bd7400c24",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:5)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "33ea7b10-38fd-4039-9272-8e1b1119ea51",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "70c34073-f1aa-4742-b1cc-5388b316b17f"
        },
        "item": {
          "id": "bf7876c6-e59a-4b8d-b0e4-bf1b6632e7f3",
          "name": "/PartyRole?fields=href",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "href"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "f91cd89c-cee8-4888-a07a-38cdcf2a3fc9"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "href"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b9863850-d04f-4ff0-b0ad-9089d687a8ab",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "8ca33c45-72b3-4448-abac-82b6a102d18b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 13:48:22 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "169"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 12,
          "responseSize": 169
        },
        "id": "bf7876c6-e59a-4b8d-b0e4-bf1b6632e7f3"
      },
      {
        "cursor": {
          "ref": "07831755-4cc1-473e-8784-39ae1e6c49f2",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5b1657ea-7f67-4b53-9a49-2c50c91b0b97"
        },
        "item": {
          "id": "7821e58d-ca5d-43ff-870c-d3f8fdb1b866",
          "name": "/PartyRole?fields=id",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "id"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "42934205-1c50-4f22-8e75-f4b93f0b93d6"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "id"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ffa16004-a0f4-4855-af67-86940cf69a06",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ace5b1d9-4797-4b53-b514-0a9bfa1d4e9e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 13:48:22 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "169"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 15,
          "responseSize": 169
        },
        "id": "7821e58d-ca5d-43ff-870c-d3f8fdb1b866"
      },
      {
        "cursor": {
          "ref": "57a78430-8178-43cf-952c-d13e7ead5cab",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d112ee09-a9f1-4405-b184-734417e3db96"
        },
        "item": {
          "id": "2f727746-e22c-4a5d-9718-5437c75fd714",
          "name": "/PartyRole?id={{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{IDPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "64930571-2f88-4663-b11f-2511ab437922"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ef694ba5-3e58-444e-ac62-c91cd88d2459",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "67e00441-202e-4d9d-a24a-7e6bbde602e6",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 13:48:22 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 24,
          "responseSize": 322
        },
        "id": "2f727746-e22c-4a5d-9718-5437c75fd714",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:8)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ef2e369c-af84-4b1a-9491-ad527bd4ee07",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c60ad636-5ebe-4307-bc6d-78cf848dc5a0"
        },
        "item": {
          "id": "2c2039c9-5e79-4c0a-a89d-bd17f357616d",
          "name": "/PartyRole?fields=name",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "name"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "2f1939b4-bd45-4c57-9e80-74d1e1a03be7"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "name"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "75ecf091-035d-4304-b2db-43c4381c7530",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a1331438-d5ea-48e3-878e-afb21a6fa34d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 13:48:23 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "184"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 24,
          "responseSize": 184
        },
        "id": "2c2039c9-5e79-4c0a-a89d-bd17f357616d"
      },
      {
        "cursor": {
          "ref": "17058319-eb3d-4b41-9ef4-fd0f870e4d98",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a2efa83c-9c47-493d-867f-e699b74df1d5"
        },
        "item": {
          "id": "fd7338a8-2628-449d-a663-4477bd5ad771",
          "name": "/PartyRole?name={{NAMEPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{NAMEPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "482b4783-c816-45be-88b4-c91c7e75c408"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "name",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "aee668b0-7a3d-4fe2-9b8a-3f158862212e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "68b81f66-1ea3-487d-8c65-cc9961539469",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 13:48:23 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 26,
          "responseSize": 322
        },
        "id": "fd7338a8-2628-449d-a663-4477bd5ad771",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:10)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "aa3c3a50-b075-4a3a-8a93-247b92f90453",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3d94a33d-eade-4e2a-86b2-87dda93a14d6"
        },
        "item": {
          "id": "d60cc903-3a5c-43c3-9ba9-dbf77abcdcc5",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f653783a-0aea-44d0-a163-6934b140c585",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "3b5188e8-91a3-4990-b7cc-0cb72e7f16b9"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "968d1ed6-3228-44e6-ae6f-343131f0ced6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 64,
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
          }
        },
        "response": {
          "id": "b6793833-865e-4a32-9146-1344b4d47eae",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 13:48:23 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "1536"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Allow",
              "value": "GET, POST"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'none'"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              60,
              104,
              116,
              109,
              108,
              32,
              108,
              97,
              110,
              103,
              61,
              34,
              101,
              110,
              34,
              62,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              109,
              101,
              116,
              97,
              32,
              99,
              104,
              97,
              114,
              115,
              101,
              116,
              61,
              34,
              117,
              116,
              102,
              45,
              56,
              34,
              62,
              10,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              112,
              114,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              82,
              111,
              117,
              116,
              101,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              105,
              110,
              32,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              40,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              41,
              32,
              98,
              117,
              116,
              32,
              116,
              104,
              101,
              114,
              101,
              32,
              105,
              115,
              32,
              110,
              111,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              112,
              97,
              116,
              99,
              104,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              46,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              101,
              110,
              100,
              52,
              48,
              53,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              114,
              111,
              117,
              116,
              101,
              114,
              46,
              106,
              115,
              58,
              51,
              48,
              54,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              82,
              111,
              117,
              116,
              101,
              114,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              114,
              111,
              117,
              116,
              101,
              114,
              46,
              106,
              115,
              58,
              52,
              50,
              49,
              58,
              49,
              54,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              52,
              56,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              111,
              114,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              111,
              114,
              46,
              106,
              115,
              58,
              51,
              55,
              49,
              58,
              49,
              52,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              46,
              106,
              115,
              58,
              52,
              53,
              48,
              58,
              49,
              52,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              54,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              46,
              97,
              112,
              112,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              53,
              49,
              58,
              51,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              46,
              101,
              109,
              105,
              116,
              32,
              40,
              101,
              118,
              101,
              110,
              116,
              115,
              46,
              106,
              115,
              58,
              49,
              57,
              56,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              112,
              97,
              114,
              115,
              101,
              114,
              79,
              110,
              73,
              110,
              99,
              111,
              109,
              105,
              110,
              103,
              32,
              40,
              95,
              104,
              116,
              116,
              112,
              95,
              115,
              101,
              114,
              118,
              101,
              114,
              46,
              106,
              115,
              58,
              54,
              57,
              49,
              58,
              49,
              50,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              72,
              84,
              84,
              80,
              80,
              97,
              114,
              115,
              101,
              114,
              46,
              112,
              97,
              114,
              115,
              101,
              114,
              79,
              110,
              72,
              101,
              97,
              100,
              101,
              114,
              115,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              40,
              95,
              104,
              116,
              116,
              112,
              95,
              99,
              111,
              109,
              109,
              111,
              110,
              46,
              106,
              115,
              58,
              49,
              49,
              49,
              58,
              49,
              55,
              41,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 1536
        },
        "id": "d60cc903-3a5c-43c3-9ba9-dbf77abcdcc5",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 405",
              "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8532d53d-e238-472e-86e3-3c84200e3cc6",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e07136e0-2329-4f40-92f4-98a5e4915ee5"
        },
        "item": {
          "id": "f95857ec-d434-49cd-a349-e4e3aa140afc",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "       ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "cd9c95b7-1d97-4a1d-903e-3de1d9f6e917"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3c9a0410-e201-4dc5-8b95-b526dad7eb86",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "7d9a854b-27a6-4365-86c1-110751b7a72e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 13:48:23 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 26,
          "responseSize": 322
        },
        "id": "f95857ec-d434-49cd-a349-e4e3aa140afc",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:12)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "27a94990-87c8-4461-b5f1-098b079acd01",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ba5fb2e5-0825-422d-8f46-7fb1bddee4ea"
        },
        "item": {
          "id": "ef6c3c38-5d30-474b-8140-385c55d35f65",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "b1d24776-3798-40bf-8e8d-d26e46f4cb2e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "264ef8f7-06fa-4f64-b4d7-d384f720afb1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "80e3dd2c-55cf-42f3-805a-978ba0626ecf",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 13:48:23 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "1537"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Allow",
              "value": "GET, POST"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'none'"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              60,
              104,
              116,
              109,
              108,
              32,
              108,
              97,
              110,
              103,
              61,
              34,
              101,
              110,
              34,
              62,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              109,
              101,
              116,
              97,
              32,
              99,
              104,
              97,
              114,
              115,
              101,
              116,
              61,
              34,
              117,
              116,
              102,
              45,
              56,
              34,
              62,
              10,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              112,
              114,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              82,
              111,
              117,
              116,
              101,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              105,
              110,
              32,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              40,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              41,
              32,
              98,
              117,
              116,
              32,
              116,
              104,
              101,
              114,
              101,
              32,
              105,
              115,
              32,
              110,
              111,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              46,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              101,
              110,
              100,
              52,
              48,
              53,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              114,
              111,
              117,
              116,
              101,
              114,
              46,
              106,
              115,
              58,
              51,
              48,
              54,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              82,
              111,
              117,
              116,
              101,
              114,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              114,
              111,
              117,
              116,
              101,
              114,
              46,
              106,
              115,
              58,
              52,
              50,
              49,
              58,
              49,
              54,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              52,
              56,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              111,
              114,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              111,
              114,
              46,
              106,
              115,
              58,
              51,
              55,
              49,
              58,
              49,
              52,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              46,
              106,
              115,
              58,
              52,
              53,
              48,
              58,
              49,
              52,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              54,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              46,
              97,
              112,
              112,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              53,
              49,
              58,
              51,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              46,
              101,
              109,
              105,
              116,
              32,
              40,
              101,
              118,
              101,
              110,
              116,
              115,
              46,
              106,
              115,
              58,
              49,
              57,
              56,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              112,
              97,
              114,
              115,
              101,
              114,
              79,
              110,
              73,
              110,
              99,
              111,
              109,
              105,
              110,
              103,
              32,
              40,
              95,
              104,
              116,
              116,
              112,
              95,
              115,
              101,
              114,
              118,
              101,
              114,
              46,
              106,
              115,
              58,
              54,
              57,
              49,
              58,
              49,
              50,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              72,
              84,
              84,
              80,
              80,
              97,
              114,
              115,
              101,
              114,
              46,
              112,
              97,
              114,
              115,
              101,
              114,
              79,
              110,
              72,
              101,
              97,
              100,
              101,
              114,
              115,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              40,
              95,
              104,
              116,
              116,
              112,
              95,
              99,
              111,
              109,
              109,
              111,
              110,
              46,
              106,
              115,
              58,
              49,
              49,
              49,
              58,
              49,
              55,
              41,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 1537
        },
        "id": "ef6c3c38-5d30-474b-8140-385c55d35f65",
        "assertions": [
          {
            "assertion": "Status code is 204",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 204",
              "message": "expected response to have status code 204 but got 405",
              "stack": "AssertionError: expected response to have status code 204 but got 405\n   at Object.eval sandbox-script.js:1:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ba91141e-d17d-4cc1-91e6-7b1ba6ad697c",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1708d7b6-ba00-45d2-9687-55d6f8bf25b2"
        },
        "item": {
          "id": "cd0054ac-5a17-4c34-93ef-0b6a470724f1",
          "name": "/PartyRole/404ID",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  ""
                ],
                "_lastExecutionId": "af68f5ab-e1d5-4b4a-9a67-0c576cc1c401"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a38ae92e-fea1-4192-8b18-a4019dd3549f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "7655db97-2fa7-438b-a3e3-dfc7a76de56d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 13:48:23 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 14,
          "responseSize": 322
        },
        "id": "cd0054ac-5a17-4c34-93ef-0b6a470724f1",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6273380d-7234-4b53-ab60-c77bf668cec8",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "df702bfc-befb-4ef4-8a12-730db55c607a"
        },
        "item": {
          "id": "48380757-5bb6-4b86-b649-0cde44cfab14",
          "name": "/PartyRole/404ID",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "b00cb440-e863-440b-a36f-74a296e06578"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "31e73c55-4701-4c8d-b7ad-bcdaf4118421",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  ""
                ],
                "_lastExecutionId": "14cdf898-735f-4c63-9d13-76ff0da32f1f"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              "b00cb440-e863-440b-a36f-74a296e06578"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "93ef4e3a-7e81-4c89-bfb0-d7a2d2d697fc",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1b0b2ecc-2f6f-43c2-918d-748f07f2e99a",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 13:48:23 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "85"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              54,
              48,
              44,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              103,
              105,
              118,
              101,
              110,
              32,
              105,
              100,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 85
        },
        "id": "48380757-5bb6-4b86-b649-0cde44cfab14",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 6215
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201",
          "message": "expected response to have status code 201 but got 400",
          "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "07f314d63800094e22e662fde7069e53",
          "id": "78d0315b-157b-4e1f-b3a7-4349bb0b54c3",
          "timestamp": 1620740902234,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
              }
            }
          ]
        },
        "parent": {
          "id": "b8023832-bd79-471d-b6d7-8ca5e8c33f63",
          "name": "N1",
          "item": [
            {
              "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
                  }
                }
              ]
            },
            {
              "id": "86448252-4c44-4e62-a179-846ea6f68747",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "195c38c5-0481-4370-ada4-bc4031a8919b"
                  }
                }
              ]
            },
            {
              "id": "7e4c6f62-1887-472b-ad1f-98ca925be67b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "aae5e153-89f6-4514-9cf1-339b0ca25a3a"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b7dc622d-1b23-49a6-b49d-616d3cd422bd",
          "httpRequestId": "4d7396d9-dff3-4574-9e2d-cdc5f33de13b",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ 'code', 'reason', 'message' ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ 'code', 'reason', 'message' ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "0592536d04ac74329436d34710fa27aa",
          "id": "07979391-3c0e-46af-9634-d66effc3feea",
          "timestamp": 1620740902239,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
              }
            }
          ]
        },
        "parent": {
          "id": "b8023832-bd79-471d-b6d7-8ca5e8c33f63",
          "name": "N1",
          "item": [
            {
              "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
                  }
                }
              ]
            },
            {
              "id": "86448252-4c44-4e62-a179-846ea6f68747",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "195c38c5-0481-4370-ada4-bc4031a8919b"
                  }
                }
              ]
            },
            {
              "id": "7e4c6f62-1887-472b-ad1f-98ca925be67b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "aae5e153-89f6-4514-9cf1-339b0ca25a3a"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b7dc622d-1b23-49a6-b49d-616d3cd422bd",
          "httpRequestId": "4d7396d9-dff3-4574-9e2d-cdc5f33de13b",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response has name attribute",
          "message": "expected undefined to be a string",
          "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:3:1)",
          "checksum": "467da55d0af94b10370bf67335cff3be",
          "id": "d662f276-8578-4aba-b68d-25f3015df6bb",
          "timestamp": 1620740902240,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
              }
            }
          ]
        },
        "parent": {
          "id": "b8023832-bd79-471d-b6d7-8ca5e8c33f63",
          "name": "N1",
          "item": [
            {
              "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
                  }
                }
              ]
            },
            {
              "id": "86448252-4c44-4e62-a179-846ea6f68747",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "195c38c5-0481-4370-ada4-bc4031a8919b"
                  }
                }
              ]
            },
            {
              "id": "7e4c6f62-1887-472b-ad1f-98ca925be67b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "aae5e153-89f6-4514-9cf1-339b0ca25a3a"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b7dc622d-1b23-49a6-b49d-616d3cd422bd",
          "httpRequestId": "4d7396d9-dff3-4574-9e2d-cdc5f33de13b",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Response has href attribute",
          "message": "expected undefined to be a string",
          "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:4:1)",
          "checksum": "d14566ad7a15bdf1547ee1ecf2523906",
          "id": "a88d7d69-603e-40bf-a42d-bab28eba547d",
          "timestamp": 1620740902241,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
              }
            }
          ]
        },
        "parent": {
          "id": "b8023832-bd79-471d-b6d7-8ca5e8c33f63",
          "name": "N1",
          "item": [
            {
              "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
                  }
                }
              ]
            },
            {
              "id": "86448252-4c44-4e62-a179-846ea6f68747",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "195c38c5-0481-4370-ada4-bc4031a8919b"
                  }
                }
              ]
            },
            {
              "id": "7e4c6f62-1887-472b-ad1f-98ca925be67b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "aae5e153-89f6-4514-9cf1-339b0ca25a3a"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b7dc622d-1b23-49a6-b49d-616d3cd422bd",
          "httpRequestId": "4d7396d9-dff3-4574-9e2d-cdc5f33de13b",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 4,
          "test": "Response has id attribute",
          "message": "expected undefined to be a string",
          "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:5:1)",
          "checksum": "b42b42fce085f4fe6ea372f210e0fed7",
          "id": "c81eb654-b487-451f-875b-f937eed0f91c",
          "timestamp": 1620740902242,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
              }
            }
          ]
        },
        "parent": {
          "id": "b8023832-bd79-471d-b6d7-8ca5e8c33f63",
          "name": "N1",
          "item": [
            {
              "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
                  }
                }
              ]
            },
            {
              "id": "86448252-4c44-4e62-a179-846ea6f68747",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "195c38c5-0481-4370-ada4-bc4031a8919b"
                  }
                }
              ]
            },
            {
              "id": "7e4c6f62-1887-472b-ad1f-98ca925be67b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "aae5e153-89f6-4514-9cf1-339b0ca25a3a"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b7dc622d-1b23-49a6-b49d-616d3cd422bd",
          "httpRequestId": "4d7396d9-dff3-4574-9e2d-cdc5f33de13b",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 5,
          "test": "Response has name attribute",
          "message": "expected undefined to be a string",
          "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:6:1)",
          "checksum": "67022e7602f1d0567d07dd3b41940326",
          "id": "51dd43d5-eeda-4a8e-985f-d0212a55ea82",
          "timestamp": 1620740902243,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 6,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:5 in test-script",
        "source": {
          "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
              }
            }
          ]
        },
        "parent": {
          "id": "b8023832-bd79-471d-b6d7-8ca5e8c33f63",
          "name": "N1",
          "item": [
            {
              "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
                  }
                }
              ]
            },
            {
              "id": "86448252-4c44-4e62-a179-846ea6f68747",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "195c38c5-0481-4370-ada4-bc4031a8919b"
                  }
                }
              ]
            },
            {
              "id": "7e4c6f62-1887-472b-ad1f-98ca925be67b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "aae5e153-89f6-4514-9cf1-339b0ca25a3a"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b7dc622d-1b23-49a6-b49d-616d3cd422bd",
          "httpRequestId": "4d7396d9-dff3-4574-9e2d-cdc5f33de13b",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 6,
          "test": "Body includes value held on name",
          "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
          "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:7:1)",
          "checksum": "8d35a9239f6eb0694e66d163ee81dc7a",
          "id": "bf480412-71f5-4bd0-811b-b09dd4a3defc",
          "timestamp": 1620740902244,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 7,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:6 in test-script",
        "source": {
          "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
              }
            }
          ]
        },
        "parent": {
          "id": "b8023832-bd79-471d-b6d7-8ca5e8c33f63",
          "name": "N1",
          "item": [
            {
              "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
                  }
                }
              ]
            },
            {
              "id": "86448252-4c44-4e62-a179-846ea6f68747",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "195c38c5-0481-4370-ada4-bc4031a8919b"
                  }
                }
              ]
            },
            {
              "id": "7e4c6f62-1887-472b-ad1f-98ca925be67b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "aae5e153-89f6-4514-9cf1-339b0ca25a3a"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b7dc622d-1b23-49a6-b49d-616d3cd422bd",
          "httpRequestId": "4d7396d9-dff3-4574-9e2d-cdc5f33de13b",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 7,
          "test": "Body includes value held on href",
          "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
          "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:8:1)",
          "checksum": "637b9d0200e5fa716b3b132189aaf102",
          "id": "519f01ab-5983-4ff5-babd-766b5201d539",
          "timestamp": 1620740902245,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 8,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:7 in test-script",
        "source": {
          "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
              }
            }
          ]
        },
        "parent": {
          "id": "b8023832-bd79-471d-b6d7-8ca5e8c33f63",
          "name": "N1",
          "item": [
            {
              "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
                  }
                }
              ]
            },
            {
              "id": "86448252-4c44-4e62-a179-846ea6f68747",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "195c38c5-0481-4370-ada4-bc4031a8919b"
                  }
                }
              ]
            },
            {
              "id": "7e4c6f62-1887-472b-ad1f-98ca925be67b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "aae5e153-89f6-4514-9cf1-339b0ca25a3a"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b7dc622d-1b23-49a6-b49d-616d3cd422bd",
          "httpRequestId": "4d7396d9-dff3-4574-9e2d-cdc5f33de13b",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 8,
          "test": "Body includes value held on id",
          "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
          "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:9:1)",
          "checksum": "75406781bcd6cb8a6dd834e32f5fbcd9",
          "id": "72b357fd-a710-487d-a481-4645278838e6",
          "timestamp": 1620740902246,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 9,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:8 in test-script",
        "source": {
          "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
              }
            }
          ]
        },
        "parent": {
          "id": "b8023832-bd79-471d-b6d7-8ca5e8c33f63",
          "name": "N1",
          "item": [
            {
              "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
                  }
                }
              ]
            },
            {
              "id": "86448252-4c44-4e62-a179-846ea6f68747",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "195c38c5-0481-4370-ada4-bc4031a8919b"
                  }
                }
              ]
            },
            {
              "id": "7e4c6f62-1887-472b-ad1f-98ca925be67b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "aae5e153-89f6-4514-9cf1-339b0ca25a3a"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b7dc622d-1b23-49a6-b49d-616d3cd422bd",
          "httpRequestId": "4d7396d9-dff3-4574-9e2d-cdc5f33de13b",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 9,
          "test": "Body includes value held on name",
          "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
          "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:10:1)",
          "checksum": "3371d4647fc82c247216e721d4d7e719",
          "id": "82a470b6-dd0c-418d-aabe-72465640d35c",
          "timestamp": 1620740902247,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 10,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:9 in test-script",
        "source": {
          "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
              }
            }
          ]
        },
        "parent": {
          "id": "b8023832-bd79-471d-b6d7-8ca5e8c33f63",
          "name": "N1",
          "item": [
            {
              "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
                  }
                }
              ]
            },
            {
              "id": "86448252-4c44-4e62-a179-846ea6f68747",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "195c38c5-0481-4370-ada4-bc4031a8919b"
                  }
                }
              ]
            },
            {
              "id": "7e4c6f62-1887-472b-ad1f-98ca925be67b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "aae5e153-89f6-4514-9cf1-339b0ca25a3a"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b7dc622d-1b23-49a6-b49d-616d3cd422bd",
          "httpRequestId": "4d7396d9-dff3-4574-9e2d-cdc5f33de13b",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "4b5c6b1976c3c5d8eab21f19088e67bc",
          "id": "c42fd589-bc04-43ad-932b-51fb0e750330",
          "timestamp": 1620740902356,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "86448252-4c44-4e62-a179-846ea6f68747",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation search for the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                  "        }  ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                  "        }",
                  "   ",
                  "  }",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "195c38c5-0481-4370-ada4-bc4031a8919b"
              }
            }
          ]
        },
        "parent": {
          "id": "b8023832-bd79-471d-b6d7-8ca5e8c33f63",
          "name": "N1",
          "item": [
            {
              "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
                  }
                }
              ]
            },
            {
              "id": "86448252-4c44-4e62-a179-846ea6f68747",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "195c38c5-0481-4370-ada4-bc4031a8919b"
                  }
                }
              ]
            },
            {
              "id": "7e4c6f62-1887-472b-ad1f-98ca925be67b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "aae5e153-89f6-4514-9cf1-339b0ca25a3a"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "7c8094ed-e87f-499e-bd95-9673d6e08875",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fdd55495-4dec-41cb-9509-e79ad2b99ec1",
          "scriptId": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
          "execution": "195c38c5-0481-4370-ada4-bc4031a8919b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "a0a1e6ff44f64661ee4a26a8f5bf67cc",
          "id": "ef832d95-6751-42c5-ba21-0a0d994946b1",
          "timestamp": 1620740902462,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "7e4c6f62-1887-472b-ad1f-98ca925be67b",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "aae5e153-89f6-4514-9cf1-339b0ca25a3a"
              }
            }
          ]
        },
        "parent": {
          "id": "b8023832-bd79-471d-b6d7-8ca5e8c33f63",
          "name": "N1",
          "item": [
            {
              "id": "741b726a-51d9-4cd7-bed1-03abfea3450e",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "f78e38a1-7136-4f1d-8133-32d3b31370a0"
                  }
                }
              ]
            },
            {
              "id": "86448252-4c44-4e62-a179-846ea6f68747",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "195c38c5-0481-4370-ada4-bc4031a8919b"
                  }
                }
              ]
            },
            {
              "id": "7e4c6f62-1887-472b-ad1f-98ca925be67b",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "aae5e153-89f6-4514-9cf1-339b0ca25a3a"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "9f7a6284-26ac-4d33-8179-98d902f2e959",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "98f1c773-d1cb-4b94-b914-eaf13ea28927",
          "scriptId": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
          "execution": "aae5e153-89f6-4514-9cf1-339b0ca25a3a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "cada49c3645d5b70758d57cce7e1287b",
          "id": "d8a4acc4-2267-4a42-a3fd-b0bcff4403b7",
          "timestamp": 1620740902667,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "903ac34d-11c6-4a21-b2b8-379bd7400c24",
          "name": "/PartyRole?name={{NAMEPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{NAMEPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "365ac853-d032-4454-92f3-a059da08c046"
              }
            }
          ]
        },
        "parent": {
          "id": "132e4826-d5df-49c7-9415-47600b9e20c2",
          "name": "N2",
          "item": [
            {
              "id": "0640d2b5-b898-4397-b996-693a2bff736e",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "4f21c2d2-260b-4a40-b573-a1fcaf855442"
                  }
                }
              ]
            },
            {
              "id": "903ac34d-11c6-4a21-b2b8-379bd7400c24",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "365ac853-d032-4454-92f3-a059da08c046"
                  }
                }
              ]
            },
            {
              "id": "bf7876c6-e59a-4b8d-b0e4-bf1b6632e7f3",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "f91cd89c-cee8-4888-a07a-38cdcf2a3fc9"
                  }
                }
              ]
            },
            {
              "id": "7821e58d-ca5d-43ff-870c-d3f8fdb1b866",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "42934205-1c50-4f22-8e75-f4b93f0b93d6"
                  }
                }
              ]
            },
            {
              "id": "2f727746-e22c-4a5d-9718-5437c75fd714",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "64930571-2f88-4663-b11f-2511ab437922"
                  }
                }
              ]
            },
            {
              "id": "2c2039c9-5e79-4c0a-a89d-bd17f357616d",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2f1939b4-bd45-4c57-9e80-74d1e1a03be7"
                  }
                }
              ]
            },
            {
              "id": "fd7338a8-2628-449d-a663-4477bd5ad771",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "482b4783-c816-45be-88b4-c91c7e75c408"
                  }
                }
              ]
            },
            {
              "id": "d60cc903-3a5c-43c3-9ba9-dbf77abcdcc5",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "3b5188e8-91a3-4990-b7cc-0cb72e7f16b9"
                  }
                }
              ]
            },
            {
              "id": "f95857ec-d434-49cd-a349-e4e3aa140afc",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "cd9c95b7-1d97-4a1d-903e-3de1d9f6e917"
                  }
                }
              ]
            },
            {
              "id": "ef6c3c38-5d30-474b-8140-385c55d35f65",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "b1d24776-3798-40bf-8e8d-d26e46f4cb2e"
                  }
                }
              ]
            },
            {
              "id": "cd0054ac-5a17-4c34-93ef-0b6a470724f1",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "af68f5ab-e1d5-4b4a-9a67-0c576cc1c401"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "5b39599a-1d89-484a-a2e7-ebb729d343f4",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8181dc20-a9de-460d-a9da-d67284dc12ad",
          "scriptId": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
          "execution": "365ac853-d032-4454-92f3-a059da08c046"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "bc19defb619c63f2d545b97aa4011709",
          "id": "897bd653-13e2-42fb-9fa6-f505d8ec0cf1",
          "timestamp": 1620740902997,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "2f727746-e22c-4a5d-9718-5437c75fd714",
          "name": "/PartyRole?id={{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{IDPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "64930571-2f88-4663-b11f-2511ab437922"
              }
            }
          ]
        },
        "parent": {
          "id": "132e4826-d5df-49c7-9415-47600b9e20c2",
          "name": "N2",
          "item": [
            {
              "id": "0640d2b5-b898-4397-b996-693a2bff736e",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "4f21c2d2-260b-4a40-b573-a1fcaf855442"
                  }
                }
              ]
            },
            {
              "id": "903ac34d-11c6-4a21-b2b8-379bd7400c24",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "365ac853-d032-4454-92f3-a059da08c046"
                  }
                }
              ]
            },
            {
              "id": "bf7876c6-e59a-4b8d-b0e4-bf1b6632e7f3",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "f91cd89c-cee8-4888-a07a-38cdcf2a3fc9"
                  }
                }
              ]
            },
            {
              "id": "7821e58d-ca5d-43ff-870c-d3f8fdb1b866",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "42934205-1c50-4f22-8e75-f4b93f0b93d6"
                  }
                }
              ]
            },
            {
              "id": "2f727746-e22c-4a5d-9718-5437c75fd714",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "64930571-2f88-4663-b11f-2511ab437922"
                  }
                }
              ]
            },
            {
              "id": "2c2039c9-5e79-4c0a-a89d-bd17f357616d",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2f1939b4-bd45-4c57-9e80-74d1e1a03be7"
                  }
                }
              ]
            },
            {
              "id": "fd7338a8-2628-449d-a663-4477bd5ad771",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "482b4783-c816-45be-88b4-c91c7e75c408"
                  }
                }
              ]
            },
            {
              "id": "d60cc903-3a5c-43c3-9ba9-dbf77abcdcc5",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "3b5188e8-91a3-4990-b7cc-0cb72e7f16b9"
                  }
                }
              ]
            },
            {
              "id": "f95857ec-d434-49cd-a349-e4e3aa140afc",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "cd9c95b7-1d97-4a1d-903e-3de1d9f6e917"
                  }
                }
              ]
            },
            {
              "id": "ef6c3c38-5d30-474b-8140-385c55d35f65",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "b1d24776-3798-40bf-8e8d-d26e46f4cb2e"
                  }
                }
              ]
            },
            {
              "id": "cd0054ac-5a17-4c34-93ef-0b6a470724f1",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "af68f5ab-e1d5-4b4a-9a67-0c576cc1c401"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "57a78430-8178-43cf-952c-d13e7ead5cab",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d112ee09-a9f1-4405-b184-734417e3db96",
          "scriptId": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
          "execution": "64930571-2f88-4663-b11f-2511ab437922"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "516a59347529fef1eb7e754723fb4e6d",
          "id": "dc7b4f6b-62a0-4325-8aba-0c65c5425172",
          "timestamp": 1620740903225,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "fd7338a8-2628-449d-a663-4477bd5ad771",
          "name": "/PartyRole?name={{NAMEPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{NAMEPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "482b4783-c816-45be-88b4-c91c7e75c408"
              }
            }
          ]
        },
        "parent": {
          "id": "132e4826-d5df-49c7-9415-47600b9e20c2",
          "name": "N2",
          "item": [
            {
              "id": "0640d2b5-b898-4397-b996-693a2bff736e",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "4f21c2d2-260b-4a40-b573-a1fcaf855442"
                  }
                }
              ]
            },
            {
              "id": "903ac34d-11c6-4a21-b2b8-379bd7400c24",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "365ac853-d032-4454-92f3-a059da08c046"
                  }
                }
              ]
            },
            {
              "id": "bf7876c6-e59a-4b8d-b0e4-bf1b6632e7f3",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "f91cd89c-cee8-4888-a07a-38cdcf2a3fc9"
                  }
                }
              ]
            },
            {
              "id": "7821e58d-ca5d-43ff-870c-d3f8fdb1b866",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "42934205-1c50-4f22-8e75-f4b93f0b93d6"
                  }
                }
              ]
            },
            {
              "id": "2f727746-e22c-4a5d-9718-5437c75fd714",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "64930571-2f88-4663-b11f-2511ab437922"
                  }
                }
              ]
            },
            {
              "id": "2c2039c9-5e79-4c0a-a89d-bd17f357616d",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2f1939b4-bd45-4c57-9e80-74d1e1a03be7"
                  }
                }
              ]
            },
            {
              "id": "fd7338a8-2628-449d-a663-4477bd5ad771",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "482b4783-c816-45be-88b4-c91c7e75c408"
                  }
                }
              ]
            },
            {
              "id": "d60cc903-3a5c-43c3-9ba9-dbf77abcdcc5",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "3b5188e8-91a3-4990-b7cc-0cb72e7f16b9"
                  }
                }
              ]
            },
            {
              "id": "f95857ec-d434-49cd-a349-e4e3aa140afc",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "cd9c95b7-1d97-4a1d-903e-3de1d9f6e917"
                  }
                }
              ]
            },
            {
              "id": "ef6c3c38-5d30-474b-8140-385c55d35f65",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "b1d24776-3798-40bf-8e8d-d26e46f4cb2e"
                  }
                }
              ]
            },
            {
              "id": "cd0054ac-5a17-4c34-93ef-0b6a470724f1",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "af68f5ab-e1d5-4b4a-9a67-0c576cc1c401"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "17058319-eb3d-4b41-9ef4-fd0f870e4d98",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a2efa83c-9c47-493d-867f-e699b74df1d5",
          "scriptId": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
          "execution": "482b4783-c816-45be-88b4-c91c7e75c408"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 405",
          "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "a5795b37f243c7713278eb9b12c8e4c5",
          "id": "a6689dd6-46b3-4b26-a08c-d80ad0116be7",
          "timestamp": 1620740903319,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d60cc903-3a5c-43c3-9ba9-dbf77abcdcc5",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f653783a-0aea-44d0-a163-6934b140c585",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "3b5188e8-91a3-4990-b7cc-0cb72e7f16b9"
              }
            }
          ]
        },
        "parent": {
          "id": "132e4826-d5df-49c7-9415-47600b9e20c2",
          "name": "N2",
          "item": [
            {
              "id": "0640d2b5-b898-4397-b996-693a2bff736e",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "4f21c2d2-260b-4a40-b573-a1fcaf855442"
                  }
                }
              ]
            },
            {
              "id": "903ac34d-11c6-4a21-b2b8-379bd7400c24",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "365ac853-d032-4454-92f3-a059da08c046"
                  }
                }
              ]
            },
            {
              "id": "bf7876c6-e59a-4b8d-b0e4-bf1b6632e7f3",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "f91cd89c-cee8-4888-a07a-38cdcf2a3fc9"
                  }
                }
              ]
            },
            {
              "id": "7821e58d-ca5d-43ff-870c-d3f8fdb1b866",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "42934205-1c50-4f22-8e75-f4b93f0b93d6"
                  }
                }
              ]
            },
            {
              "id": "2f727746-e22c-4a5d-9718-5437c75fd714",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "64930571-2f88-4663-b11f-2511ab437922"
                  }
                }
              ]
            },
            {
              "id": "2c2039c9-5e79-4c0a-a89d-bd17f357616d",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2f1939b4-bd45-4c57-9e80-74d1e1a03be7"
                  }
                }
              ]
            },
            {
              "id": "fd7338a8-2628-449d-a663-4477bd5ad771",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "482b4783-c816-45be-88b4-c91c7e75c408"
                  }
                }
              ]
            },
            {
              "id": "d60cc903-3a5c-43c3-9ba9-dbf77abcdcc5",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "3b5188e8-91a3-4990-b7cc-0cb72e7f16b9"
                  }
                }
              ]
            },
            {
              "id": "f95857ec-d434-49cd-a349-e4e3aa140afc",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "cd9c95b7-1d97-4a1d-903e-3de1d9f6e917"
                  }
                }
              ]
            },
            {
              "id": "ef6c3c38-5d30-474b-8140-385c55d35f65",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "b1d24776-3798-40bf-8e8d-d26e46f4cb2e"
                  }
                }
              ]
            },
            {
              "id": "cd0054ac-5a17-4c34-93ef-0b6a470724f1",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "af68f5ab-e1d5-4b4a-9a67-0c576cc1c401"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "aa3c3a50-b075-4a3a-8a93-247b92f90453",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3d94a33d-eade-4e2a-86b2-87dda93a14d6",
          "scriptId": "f653783a-0aea-44d0-a163-6934b140c585",
          "execution": "3b5188e8-91a3-4990-b7cc-0cb72e7f16b9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "71f79b0d5a8f0583269da176b5578e5f",
          "id": "789086d0-33db-4d49-a6dc-a658693eb5a1",
          "timestamp": 1620740903426,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f95857ec-d434-49cd-a349-e4e3aa140afc",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "       ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "cd9c95b7-1d97-4a1d-903e-3de1d9f6e917"
              }
            }
          ]
        },
        "parent": {
          "id": "132e4826-d5df-49c7-9415-47600b9e20c2",
          "name": "N2",
          "item": [
            {
              "id": "0640d2b5-b898-4397-b996-693a2bff736e",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "4f21c2d2-260b-4a40-b573-a1fcaf855442"
                  }
                }
              ]
            },
            {
              "id": "903ac34d-11c6-4a21-b2b8-379bd7400c24",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "365ac853-d032-4454-92f3-a059da08c046"
                  }
                }
              ]
            },
            {
              "id": "bf7876c6-e59a-4b8d-b0e4-bf1b6632e7f3",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "f91cd89c-cee8-4888-a07a-38cdcf2a3fc9"
                  }
                }
              ]
            },
            {
              "id": "7821e58d-ca5d-43ff-870c-d3f8fdb1b866",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "42934205-1c50-4f22-8e75-f4b93f0b93d6"
                  }
                }
              ]
            },
            {
              "id": "2f727746-e22c-4a5d-9718-5437c75fd714",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "64930571-2f88-4663-b11f-2511ab437922"
                  }
                }
              ]
            },
            {
              "id": "2c2039c9-5e79-4c0a-a89d-bd17f357616d",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2f1939b4-bd45-4c57-9e80-74d1e1a03be7"
                  }
                }
              ]
            },
            {
              "id": "fd7338a8-2628-449d-a663-4477bd5ad771",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "482b4783-c816-45be-88b4-c91c7e75c408"
                  }
                }
              ]
            },
            {
              "id": "d60cc903-3a5c-43c3-9ba9-dbf77abcdcc5",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "3b5188e8-91a3-4990-b7cc-0cb72e7f16b9"
                  }
                }
              ]
            },
            {
              "id": "f95857ec-d434-49cd-a349-e4e3aa140afc",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "cd9c95b7-1d97-4a1d-903e-3de1d9f6e917"
                  }
                }
              ]
            },
            {
              "id": "ef6c3c38-5d30-474b-8140-385c55d35f65",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "b1d24776-3798-40bf-8e8d-d26e46f4cb2e"
                  }
                }
              ]
            },
            {
              "id": "cd0054ac-5a17-4c34-93ef-0b6a470724f1",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "af68f5ab-e1d5-4b4a-9a67-0c576cc1c401"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "8532d53d-e238-472e-86e3-3c84200e3cc6",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e07136e0-2329-4f40-92f4-98a5e4915ee5",
          "scriptId": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
          "execution": "cd9c95b7-1d97-4a1d-903e-3de1d9f6e917"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 204",
          "message": "expected response to have status code 204 but got 405",
          "stack": "AssertionError: expected response to have status code 204 but got 405\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "c248c7326ad3a680ca57953e6b3c2acf",
          "id": "5375f409-2faf-4cca-a170-d2ccd3bc53b0",
          "timestamp": 1620740903535,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ef6c3c38-5d30-474b-8140-385c55d35f65",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "b1d24776-3798-40bf-8e8d-d26e46f4cb2e"
              }
            }
          ]
        },
        "parent": {
          "id": "132e4826-d5df-49c7-9415-47600b9e20c2",
          "name": "N2",
          "item": [
            {
              "id": "0640d2b5-b898-4397-b996-693a2bff736e",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "4f21c2d2-260b-4a40-b573-a1fcaf855442"
                  }
                }
              ]
            },
            {
              "id": "903ac34d-11c6-4a21-b2b8-379bd7400c24",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "365ac853-d032-4454-92f3-a059da08c046"
                  }
                }
              ]
            },
            {
              "id": "bf7876c6-e59a-4b8d-b0e4-bf1b6632e7f3",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "f91cd89c-cee8-4888-a07a-38cdcf2a3fc9"
                  }
                }
              ]
            },
            {
              "id": "7821e58d-ca5d-43ff-870c-d3f8fdb1b866",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "42934205-1c50-4f22-8e75-f4b93f0b93d6"
                  }
                }
              ]
            },
            {
              "id": "2f727746-e22c-4a5d-9718-5437c75fd714",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "64930571-2f88-4663-b11f-2511ab437922"
                  }
                }
              ]
            },
            {
              "id": "2c2039c9-5e79-4c0a-a89d-bd17f357616d",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2f1939b4-bd45-4c57-9e80-74d1e1a03be7"
                  }
                }
              ]
            },
            {
              "id": "fd7338a8-2628-449d-a663-4477bd5ad771",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "482b4783-c816-45be-88b4-c91c7e75c408"
                  }
                }
              ]
            },
            {
              "id": "d60cc903-3a5c-43c3-9ba9-dbf77abcdcc5",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "3b5188e8-91a3-4990-b7cc-0cb72e7f16b9"
                  }
                }
              ]
            },
            {
              "id": "f95857ec-d434-49cd-a349-e4e3aa140afc",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "cd9c95b7-1d97-4a1d-903e-3de1d9f6e917"
                  }
                }
              ]
            },
            {
              "id": "ef6c3c38-5d30-474b-8140-385c55d35f65",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "b1d24776-3798-40bf-8e8d-d26e46f4cb2e"
                  }
                }
              ]
            },
            {
              "id": "cd0054ac-5a17-4c34-93ef-0b6a470724f1",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "af68f5ab-e1d5-4b4a-9a67-0c576cc1c401"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "27a94990-87c8-4461-b5f1-098b079acd01",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ba5fb2e5-0825-422d-8f46-7fb1bddee4ea",
          "scriptId": "396d389e-c29c-4f93-a7b4-41e2c728886b",
          "execution": "b1d24776-3798-40bf-8e8d-d26e46f4cb2e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 404",
          "message": "expected response to have status code 404 but got 200",
          "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "d13d7d573ac6ef4ce79925080d6d7aa1",
          "id": "cc6af493-0252-4171-a448-8c73fe3c56b6",
          "timestamp": 1620740903644,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "cd0054ac-5a17-4c34-93ef-0b6a470724f1",
          "name": "/PartyRole/404ID",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  ""
                ],
                "_lastExecutionId": "af68f5ab-e1d5-4b4a-9a67-0c576cc1c401"
              }
            }
          ]
        },
        "parent": {
          "id": "132e4826-d5df-49c7-9415-47600b9e20c2",
          "name": "N2",
          "item": [
            {
              "id": "0640d2b5-b898-4397-b996-693a2bff736e",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "4f21c2d2-260b-4a40-b573-a1fcaf855442"
                  }
                }
              ]
            },
            {
              "id": "903ac34d-11c6-4a21-b2b8-379bd7400c24",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "365ac853-d032-4454-92f3-a059da08c046"
                  }
                }
              ]
            },
            {
              "id": "bf7876c6-e59a-4b8d-b0e4-bf1b6632e7f3",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "f91cd89c-cee8-4888-a07a-38cdcf2a3fc9"
                  }
                }
              ]
            },
            {
              "id": "7821e58d-ca5d-43ff-870c-d3f8fdb1b866",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "42934205-1c50-4f22-8e75-f4b93f0b93d6"
                  }
                }
              ]
            },
            {
              "id": "2f727746-e22c-4a5d-9718-5437c75fd714",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "64930571-2f88-4663-b11f-2511ab437922"
                  }
                }
              ]
            },
            {
              "id": "2c2039c9-5e79-4c0a-a89d-bd17f357616d",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2f1939b4-bd45-4c57-9e80-74d1e1a03be7"
                  }
                }
              ]
            },
            {
              "id": "fd7338a8-2628-449d-a663-4477bd5ad771",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "482b4783-c816-45be-88b4-c91c7e75c408"
                  }
                }
              ]
            },
            {
              "id": "d60cc903-3a5c-43c3-9ba9-dbf77abcdcc5",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "3b5188e8-91a3-4990-b7cc-0cb72e7f16b9"
                  }
                }
              ]
            },
            {
              "id": "f95857ec-d434-49cd-a349-e4e3aa140afc",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "cd9c95b7-1d97-4a1d-903e-3de1d9f6e917"
                  }
                }
              ]
            },
            {
              "id": "ef6c3c38-5d30-474b-8140-385c55d35f65",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "b1d24776-3798-40bf-8e8d-d26e46f4cb2e"
                  }
                }
              ]
            },
            {
              "id": "cd0054ac-5a17-4c34-93ef-0b6a470724f1",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "af68f5ab-e1d5-4b4a-9a67-0c576cc1c401"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "ba91141e-d17d-4cc1-91e6-7b1ba6ad697c",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1708d7b6-ba00-45d2-9687-55d6f8bf25b2",
          "scriptId": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
          "execution": "af68f5ab-e1d5-4b4a-9a67-0c576cc1c401"
        }
      }
    ],
    "error": null
  }
}