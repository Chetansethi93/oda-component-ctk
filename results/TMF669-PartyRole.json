{
  "collection": {
    "_": {
      "postman_id": "e39e338d-0fc5-45b5-94af-8c5ad4d815a8"
    },
    "item": [
      {
        "id": "552ce9c3-8bdc-4640-a8de-cca2d04e2ee3",
        "name": "N1",
        "item": [
          {
            "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
            "name": "/PartyRole",
            "request": {
              "description": {
                "content": "This operation creates a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                  "type": "text/javascript",
                  "exec": [
                    "var jsonData = pm.response.json();",
                    "",
                    "if (Array.isArray(jsonData)) { ",
                    "  ",
                    "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                    "  ",
                    "",
                    "}",
                    "",
                    "pm.test(\"Status code is 201\", function () {",
                    "  pm.response.to.have.status(201);",
                    "});",
                    "",
                    "var instance = pm.response.json();",
                    "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "",
                    "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "",
                    "",
                    "",
                    "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "",
                    "pm.globals.set('HREFPR01', instance['href']);",
                    "pm.globals.set('IDPR01', instance['id']);",
                    "pm.globals.set('NAMEPR01', instance['name']);",
                    "",
                    "pm.test('Body includes value held on name', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['name']);",
                    "});",
                    "pm.test('Body includes value held on href', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['href']);",
                    "});",
                    "pm.test('Body includes value held on id', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['id']);",
                    "});",
                    "pm.test('Body includes value held on name', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['name']);",
                    "});",
                    ""
                  ],
                  "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
                }
              }
            ]
          },
          {
            "id": "9982ef18-835d-429d-814d-4d4b2f88c4b8",
            "name": "/PartyRole",
            "request": {
              "description": {
                "content": "This operation search for the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                    "        }  ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                    "        }",
                    "   ",
                    "  }",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "90be12d8-dd0f-4c72-bcf4-901590d9cfe0"
                }
              }
            ]
          },
          {
            "id": "15433ac8-78cc-4c73-8c8c-832da1e277da",
            "name": "/PartyRole/{{IDPR01}}",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDPR01}}"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "c5f6b015-a520-4f30-a634-315372676004"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "id": "30f08125-abfc-4847-a66e-f7d089b571f5",
        "name": "N2",
        "item": [
          {
            "id": "1546792b-4fa7-4c92-b72d-2865ac752c35",
            "name": "/PartyRole?fields=name",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "name"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "069e813c-df79-4458-bb8a-bc350927d154"
                }
              }
            ]
          },
          {
            "id": "1e1c67ae-6405-491e-8276-49238bcdb757",
            "name": "/PartyRole?name={{NAMEPR01}}",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "name",
                    "value": "{{NAMEPR01}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "eafc94f8-3c8f-44cc-bfab-52c49466f93c"
                }
              }
            ]
          },
          {
            "id": "faea9460-bcce-4310-a069-d0aba8433770",
            "name": "/PartyRole?fields=href",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "href"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dee3af57-8ca6-44f1-83aa-c944ec0b03c3"
                }
              }
            ]
          },
          {
            "id": "80d38bd6-30f9-44cb-9e53-439e70a16d34",
            "name": "/PartyRole?fields=id",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "id"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "84c2a4e9-351e-437a-9f1c-85e66777db5b"
                }
              }
            ]
          },
          {
            "id": "e5510b38-e187-4db1-85cb-270610c77656",
            "name": "/PartyRole?id={{IDPR01}}",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{IDPR01}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "2fa1d529-9b09-40be-b9f8-91aaab320d61"
                }
              }
            ]
          },
          {
            "id": "9c9342a1-0b5a-48a6-8d46-e2af4fb66369",
            "name": "/PartyRole?fields=name",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "name"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a03cd145-1261-4102-975f-e22c162d37d2"
                }
              }
            ]
          },
          {
            "id": "b77e2732-f5c7-45db-8dd8-78274a907de8",
            "name": "/PartyRole?name={{NAMEPR01}}",
            "request": {
              "description": {
                "content": "This operation filter a PartyRole",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [
                  {
                    "key": "name",
                    "value": "{{NAMEPR01}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "85268230-29f0-46b1-92f7-a67ef2c7f9e3"
                }
              }
            ]
          },
          {
            "id": "ab515b4f-fb88-4098-a39f-360eca7623c5",
            "name": "/PartyRole/{{IDPR01}}",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDPR01}}"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f653783a-0aea-44d0-a163-6934b140c585",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "5a28870c-4d6b-4909-8b62-d906fcade918"
                }
              }
            ]
          },
          {
            "id": "5fb53c61-800f-4e3d-9a7a-1db7bab432cc",
            "name": "/PartyRole/{{IDPR01}}",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDPR01}}"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                    "      ",
                    "       ",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on name', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                    "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                    "            pm.test('IDPR02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "8abe3249-7e4e-46fa-bce8-f328da3d3ed6"
                }
              }
            ]
          },
          {
            "id": "1a932e2b-dfe8-4cc8-97fd-a813ec49de08",
            "name": "/PartyRole/{{IDPR01}}",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDPR01}}"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 204\", function () {",
                    "    pm.response.to.have.status(204);",
                    "});",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "47329eb9-2662-4397-91ed-685c3fa48ec5"
                }
              }
            ]
          },
          {
            "id": "131e48da-fd6b-4371-88d9-9bad3b23e1b5",
            "name": "/PartyRole/404ID",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDPR01}}"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 404\", function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "fef331f2-3c69-4233-b4a6-61b8e6bb85bc"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "id": "d7631d82-a83a-411e-bb3e-e9215c4030fc",
        "name": "E1",
        "item": [
          {
            "id": "b29340b5-f565-4575-ae41-926f4b7a840e",
            "name": "/PartyRole/404ID",
            "request": {
              "description": {
                "content": "This operation search for one of the created PartyRole",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "b00cb440-e863-440b-a36f-74a296e06578"
                ],
                "host": [
                  "{{Party_Role}}partyRole"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "31e73c55-4701-4c8d-b7ad-bcdaf4118421",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 404\", function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "7756b368-fef5-4dc3-a926-b2bd2792d039"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      }
    ],
    "event": [],
    "protocolProfileBehavior": {},
    "variable": [],
    "info": {
      "_postman_id": "e39e338d-0fc5-45b5-94af-8c5ad4d815a8",
      "name": "CTK-Party_Role-4.0.0",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2020-07-07T14:17:10.805Z",
      "postman_exported_using": "Postman/7.27.1"
    },
    "id": "da32588a-3916-4d78-a546-7623e391f650",
    "name": "TMForumv4",
    "values": [
      {
        "type": "any",
        "value": "http://localhost/r1-productcatalog/tmf-api/partyRoleManagement/v4/",
        "key": "Party_Role"
      }
    ]
  },
  "globals": {
    "id": "91652006-c2ee-4b01-89dd-b1c3b203d591",
    "values": [
      {
        "type": "any",
        "value": null,
        "key": "HREFPR01"
      },
      {
        "type": "any",
        "value": null,
        "key": "IDPR01"
      },
      {
        "type": "any",
        "value": null,
        "key": "NAMEPR01"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 74,
        "pending": 0,
        "failed": 19
      },
      "testScripts": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 13.066666666666666,
      "responseMin": 7,
      "responseMax": 55,
      "responseSd": 11.398635395909848,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1620741646480,
      "completed": 1620741647970
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6b18810a-6354-48db-aed1-d5ea0ea0eda5",
          "httpRequestId": "8390ddaf-854f-4215-8584-da417281f4c6"
        },
        "item": {
          "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation creates a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ef145b1a-0607-4cf5-9a66-518a2b8388e1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 35,
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
          }
        },
        "response": {
          "id": "e73b10ae-21df-471f-9c73-7d8d2489b32e",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 14:00:46 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "97"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              50,
              52,
              44,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              98,
              111,
              100,
              121,
              32,
              102,
              105,
              101,
              108,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              114,
              111,
              112,
              101,
              114,
              116,
              121,
              58,
              32,
              114,
              111,
              108,
              101,
              84,
              121,
              112,
              101,
              32,
              110,
              111,
              116,
              32,
              97,
              108,
              108,
              111,
              119,
              101,
              100,
              32,
              105,
              110,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 55,
          "responseSize": 97
        },
        "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ 'code', 'reason', 'message' ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ 'code', 'reason', 'message' ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response has name attribute",
              "message": "expected undefined to be a string",
              "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:3:1)"
            }
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Response has href attribute",
              "message": "expected undefined to be a string",
              "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:4:1)"
            }
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "Response has id attribute",
              "message": "expected undefined to be a string",
              "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:5:1)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 5,
              "test": "Response has name attribute",
              "message": "expected undefined to be a string",
              "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:6:1)"
            }
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 6,
              "test": "Body includes value held on name",
              "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
              "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:7:1)"
            }
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 7,
              "test": "Body includes value held on href",
              "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
              "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:8:1)"
            }
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 8,
              "test": "Body includes value held on id",
              "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
              "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:9:1)"
            }
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 9,
              "test": "Body includes value held on name",
              "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
              "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:10:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7fc71d68-b813-4d3d-b339-c95d8e332e86",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e5488ada-5924-40bd-b4b3-2fd0128d5a45"
        },
        "item": {
          "id": "9982ef18-835d-429d-814d-4d4b2f88c4b8",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation search for the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                  "        }  ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                  "        }",
                  "   ",
                  "  }",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "90be12d8-dd0f-4c72-bcf4-901590d9cfe0"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e286328b-9372-47a2-a8b2-c4f981b1c18e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ce1b99ab-fb15-42b6-b32f-325f5fe8a8a8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 14:00:46 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 322
        },
        "id": "9982ef18-835d-429d-814d-4d4b2f88c4b8",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6e9e6d0c-b458-4e91-90f4-c04dc3cd8efa",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3d5703f9-4797-4661-a1ee-4390fec30a74"
        },
        "item": {
          "id": "15433ac8-78cc-4c73-8c8c-832da1e277da",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "c5f6b015-a520-4f30-a634-315372676004"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "415d7cd3-cb4e-4c3b-a241-e1fa6eeeb1f2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b1e65372-0671-4b77-96b2-c4bd7b954826",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 14:00:46 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 322
        },
        "id": "15433ac8-78cc-4c73-8c8c-832da1e277da",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:3)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "469b8c6d-a592-43e9-a629-f893afc00a75",
          "length": 15,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "01c741f3-3c4a-4356-b57b-08310d802aec"
        },
        "item": {
          "id": "1546792b-4fa7-4c92-b72d-2865ac752c35",
          "name": "/PartyRole?fields=name",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "name"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "069e813c-df79-4458-bb8a-bc350927d154"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "name"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "65a03109-c507-4f39-a496-2065fdf3ee5d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b80f4c52-aaaa-4756-8e65-8233b9e0afab",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 14:00:46 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "184"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 184
        },
        "id": "1546792b-4fa7-4c92-b72d-2865ac752c35"
      },
      {
        "cursor": {
          "ref": "8f9334ec-9350-4210-851d-c3b223b6c858",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "503fa642-4062-4c51-880b-a400fb59bb41"
        },
        "item": {
          "id": "1e1c67ae-6405-491e-8276-49238bcdb757",
          "name": "/PartyRole?name={{NAMEPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{NAMEPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "eafc94f8-3c8f-44cc-bfab-52c49466f93c"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "name",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1347ba9d-c318-4f51-a881-3f9cfc3d9ee3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b7f8efe0-e8a2-4858-985c-e866bd2f8d99",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 14:00:46 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 322
        },
        "id": "1e1c67ae-6405-491e-8276-49238bcdb757",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:5)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9b966469-7d51-4a9f-a27b-f940fa28ed7a",
          "length": 15,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c0123892-ccca-4fb1-9ca3-478c9450fab1"
        },
        "item": {
          "id": "faea9460-bcce-4310-a069-d0aba8433770",
          "name": "/PartyRole?fields=href",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "href"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "dee3af57-8ca6-44f1-83aa-c944ec0b03c3"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "href"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "76f55ccc-3168-482c-ae30-e1603783c35c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "06a2b5ea-7a1c-40ae-b351-fbd4eaa93f12",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 14:00:47 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "169"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 169
        },
        "id": "faea9460-bcce-4310-a069-d0aba8433770"
      },
      {
        "cursor": {
          "ref": "ac766783-9aa0-4f60-9247-8876327d140d",
          "length": 15,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "54badb2d-e78c-42ea-b157-e94cbb5e78c7"
        },
        "item": {
          "id": "80d38bd6-30f9-44cb-9e53-439e70a16d34",
          "name": "/PartyRole?fields=id",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "id"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "84c2a4e9-351e-437a-9f1c-85e66777db5b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "id"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "36956aa3-3373-45c5-a197-7961bf35f50f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6f1d4b66-cce8-4c07-8d01-d11e174b296b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 14:00:47 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "169"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 169
        },
        "id": "80d38bd6-30f9-44cb-9e53-439e70a16d34"
      },
      {
        "cursor": {
          "ref": "266e996b-ad80-44e3-8d17-068cac3d9907",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "58e1fe8e-ab7a-48e6-88e7-b4ba94fe5d67"
        },
        "item": {
          "id": "e5510b38-e187-4db1-85cb-270610c77656",
          "name": "/PartyRole?id={{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{IDPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "2fa1d529-9b09-40be-b9f8-91aaab320d61"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b404f2ae-bcae-426a-9721-926fbe1b3647",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4fc7c733-43b1-45bb-ba72-5b9db9c4ce63",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 14:00:47 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 16,
          "responseSize": 322
        },
        "id": "e5510b38-e187-4db1-85cb-270610c77656",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:8)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7e194049-19da-48cc-965b-77841b4f9118",
          "length": 15,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e54b5918-7b45-45f8-b2a2-d27128cbcb41"
        },
        "item": {
          "id": "9c9342a1-0b5a-48a6-8d46-e2af4fb66369",
          "name": "/PartyRole?fields=name",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "name"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a03cd145-1261-4102-975f-e22c162d37d2"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "name"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c676aad1-d906-44cb-887b-b801cfab991b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b6b7fe49-2726-4faf-8a56-9e3aebcee9ad",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 14:00:47 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "184"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 184
        },
        "id": "9c9342a1-0b5a-48a6-8d46-e2af4fb66369"
      },
      {
        "cursor": {
          "ref": "ef6418a6-0ef6-48c8-adb7-ccc611986982",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "80ce5906-c676-4fe2-b4ff-45266bfe1bd2"
        },
        "item": {
          "id": "b77e2732-f5c7-45db-8dd8-78274a907de8",
          "name": "/PartyRole?name={{NAMEPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{NAMEPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "85268230-29f0-46b1-92f7-a67ef2c7f9e3"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "name",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ade8e763-90d7-4df3-8e57-691bba071cab",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "023bfb60-19a8-40a4-ae27-d65496402406",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 14:00:47 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 322
        },
        "id": "b77e2732-f5c7-45db-8dd8-78274a907de8",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:10)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "749c56fb-3959-4912-b80b-b83c3365f879",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1c632698-1628-41aa-be81-a9765994be39"
        },
        "item": {
          "id": "ab515b4f-fb88-4098-a39f-360eca7623c5",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f653783a-0aea-44d0-a163-6934b140c585",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "5a28870c-4d6b-4909-8b62-d906fcade918"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "18c00ef0-cd0f-47a8-90f4-1bf24476b4d8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 64,
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
          }
        },
        "response": {
          "id": "21c0717d-4b94-4570-b16c-30cbe3ed4e40",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 14:00:47 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "1536"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Allow",
              "value": "GET, POST"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'none'"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              60,
              104,
              116,
              109,
              108,
              32,
              108,
              97,
              110,
              103,
              61,
              34,
              101,
              110,
              34,
              62,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              109,
              101,
              116,
              97,
              32,
              99,
              104,
              97,
              114,
              115,
              101,
              116,
              61,
              34,
              117,
              116,
              102,
              45,
              56,
              34,
              62,
              10,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              112,
              114,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              82,
              111,
              117,
              116,
              101,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              105,
              110,
              32,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              40,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              41,
              32,
              98,
              117,
              116,
              32,
              116,
              104,
              101,
              114,
              101,
              32,
              105,
              115,
              32,
              110,
              111,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              112,
              97,
              116,
              99,
              104,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              46,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              101,
              110,
              100,
              52,
              48,
              53,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              114,
              111,
              117,
              116,
              101,
              114,
              46,
              106,
              115,
              58,
              51,
              48,
              54,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              82,
              111,
              117,
              116,
              101,
              114,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              114,
              111,
              117,
              116,
              101,
              114,
              46,
              106,
              115,
              58,
              52,
              50,
              49,
              58,
              49,
              54,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              52,
              56,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              111,
              114,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              111,
              114,
              46,
              106,
              115,
              58,
              51,
              55,
              49,
              58,
              49,
              52,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              46,
              106,
              115,
              58,
              52,
              53,
              48,
              58,
              49,
              52,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              54,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              46,
              97,
              112,
              112,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              53,
              49,
              58,
              51,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              46,
              101,
              109,
              105,
              116,
              32,
              40,
              101,
              118,
              101,
              110,
              116,
              115,
              46,
              106,
              115,
              58,
              49,
              57,
              56,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              112,
              97,
              114,
              115,
              101,
              114,
              79,
              110,
              73,
              110,
              99,
              111,
              109,
              105,
              110,
              103,
              32,
              40,
              95,
              104,
              116,
              116,
              112,
              95,
              115,
              101,
              114,
              118,
              101,
              114,
              46,
              106,
              115,
              58,
              54,
              57,
              49,
              58,
              49,
              50,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              72,
              84,
              84,
              80,
              80,
              97,
              114,
              115,
              101,
              114,
              46,
              112,
              97,
              114,
              115,
              101,
              114,
              79,
              110,
              72,
              101,
              97,
              100,
              101,
              114,
              115,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              40,
              95,
              104,
              116,
              116,
              112,
              95,
              99,
              111,
              109,
              109,
              111,
              110,
              46,
              106,
              115,
              58,
              49,
              49,
              49,
              58,
              49,
              55,
              41,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 1536
        },
        "id": "ab515b4f-fb88-4098-a39f-360eca7623c5",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 405",
              "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ed827a59-be0e-482d-b999-f9c23d9ad335",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "edd2e24e-729b-4892-a6b3-beb229baf69e"
        },
        "item": {
          "id": "5fb53c61-800f-4e3d-9a7a-1db7bab432cc",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "       ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "8abe3249-7e4e-46fa-bce8-f328da3d3ed6"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f1623397-0028-4bc0-a453-b75be5a8d3b8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2e999505-ef04-4f8a-923b-bd810da66831",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 14:00:47 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 12,
          "responseSize": 322
        },
        "id": "5fb53c61-800f-4e3d-9a7a-1db7bab432cc",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Instance has all mandatory attributes",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Instance has all mandatory attributes",
              "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
              "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:12)"
            }
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Response has href attribute",
            "skipped": false
          },
          {
            "assertion": "Response has id attribute",
            "skipped": false
          },
          {
            "assertion": "Response has name attribute",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on href",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on id",
            "skipped": false
          },
          {
            "assertion": "Body includes value held on name",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c9c80340-be70-476a-9e2b-2bca1bf72df6",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3f9da5a5-063d-4742-a5dc-ffffba6faad4"
        },
        "item": {
          "id": "1a932e2b-dfe8-4cc8-97fd-a813ec49de08",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "47329eb9-2662-4397-91ed-685c3fa48ec5"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9cac7ac9-6365-4cf3-827a-8b32a33e9a75",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "cdf19034-f4de-427c-af9a-1725d95ef46a",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 14:00:47 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "1537"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Allow",
              "value": "GET, POST"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'none'"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              60,
              104,
              116,
              109,
              108,
              32,
              108,
              97,
              110,
              103,
              61,
              34,
              101,
              110,
              34,
              62,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              109,
              101,
              116,
              97,
              32,
              99,
              104,
              97,
              114,
              115,
              101,
              116,
              61,
              34,
              117,
              116,
              102,
              45,
              56,
              34,
              62,
              10,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              112,
              114,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              82,
              111,
              117,
              116,
              101,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              105,
              110,
              32,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              40,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              41,
              32,
              98,
              117,
              116,
              32,
              116,
              104,
              101,
              114,
              101,
              32,
              105,
              115,
              32,
              110,
              111,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              46,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              101,
              110,
              100,
              52,
              48,
              53,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              114,
              111,
              117,
              116,
              101,
              114,
              46,
              106,
              115,
              58,
              51,
              48,
              54,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              82,
              111,
              117,
              116,
              101,
              114,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              114,
              111,
              117,
              116,
              101,
              114,
              46,
              106,
              115,
              58,
              52,
              50,
              49,
              58,
              49,
              54,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              52,
              56,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              86,
              97,
              108,
              105,
              100,
              97,
              116,
              111,
              114,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              111,
              114,
              46,
              106,
              115,
              58,
              51,
              55,
              49,
              58,
              49,
              52,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              116,
              111,
              111,
              108,
              115,
              47,
              109,
              105,
              100,
              100,
              108,
              101,
              119,
              97,
              114,
              101,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              46,
              106,
              115,
              58,
              52,
              53,
              48,
              58,
              49,
              52,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              99,
              97,
              108,
              108,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              51,
              57,
              58,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              51,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              70,
              117,
              110,
              99,
              116,
              105,
              111,
              110,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              49,
              56,
              54,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              46,
              97,
              112,
              112,
              32,
              40,
              47,
              115,
              114,
              99,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              53,
              49,
              58,
              51,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              46,
              101,
              109,
              105,
              116,
              32,
              40,
              101,
              118,
              101,
              110,
              116,
              115,
              46,
              106,
              115,
              58,
              49,
              57,
              56,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              112,
              97,
              114,
              115,
              101,
              114,
              79,
              110,
              73,
              110,
              99,
              111,
              109,
              105,
              110,
              103,
              32,
              40,
              95,
              104,
              116,
              116,
              112,
              95,
              115,
              101,
              114,
              118,
              101,
              114,
              46,
              106,
              115,
              58,
              54,
              57,
              49,
              58,
              49,
              50,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              72,
              84,
              84,
              80,
              80,
              97,
              114,
              115,
              101,
              114,
              46,
              112,
              97,
              114,
              115,
              101,
              114,
              79,
              110,
              72,
              101,
              97,
              100,
              101,
              114,
              115,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              32,
              40,
              95,
              104,
              116,
              116,
              112,
              95,
              99,
              111,
              109,
              109,
              111,
              110,
              46,
              106,
              115,
              58,
              49,
              49,
              49,
              58,
              49,
              55,
              41,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 1537
        },
        "id": "1a932e2b-dfe8-4cc8-97fd-a813ec49de08",
        "assertions": [
          {
            "assertion": "Status code is 204",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 204",
              "message": "expected response to have status code 204 but got 405",
              "stack": "AssertionError: expected response to have status code 204 but got 405\n   at Object.eval sandbox-script.js:1:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9fdd9dc8-7507-48f7-bd28-e6cda3e440c7",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6122c114-6576-45df-bfe5-e6e9558d76bb"
        },
        "item": {
          "id": "131e48da-fd6b-4371-88d9-9bad3b23e1b5",
          "name": "/PartyRole/404ID",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  ""
                ],
                "_lastExecutionId": "fef331f2-3c69-4233-b4a6-61b8e6bb85bc"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "26a8da3a-73e7-42e0-9525-3c5a16ae9e99",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "8c3edab5-39aa-44f6-bcc2-b39f1a7f222e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 14:00:47 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "322"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            },
            {
              "key": "X-Result-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              109,
              105,
              110,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              104,
              114,
              101,
              102,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              47,
              98,
              98,
              102,
              98,
              49,
              52,
              99,
              55,
              45,
              52,
              101,
              55,
              57,
              45,
              52,
              51,
              97,
              52,
              45,
              98,
              53,
              97,
              97,
              45,
              99,
              55,
              97,
              97,
              56,
              55,
              52,
              54,
              98,
              97,
              48,
              55,
              34,
              44,
              34,
              64,
              115,
              99,
              104,
              101,
              109,
              97,
              76,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              108,
              111,
              99,
              97,
              108,
              104,
              111,
              115,
              116,
              47,
              114,
              49,
              45,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              47,
              116,
              109,
              102,
              45,
              97,
              112,
              105,
              47,
              112,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              47,
              118,
              52,
              47,
              100,
              111,
              99,
              115,
              47,
              35,
              47,
              34,
              44,
              34,
              64,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              44,
              34,
              64,
              98,
              97,
              115,
              101,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              80,
              97,
              114,
              116,
              121,
              82,
              111,
              108,
              101,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 322
        },
        "id": "131e48da-fd6b-4371-88d9-9bad3b23e1b5",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "598fe343-8775-4366-bdd8-e93ad5b44afa",
          "length": 15,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "cdc515a4-58df-44f4-a181-a3f388800a15"
        },
        "item": {
          "id": "b29340b5-f565-4575-ae41-926f4b7a840e",
          "name": "/PartyRole/404ID",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "b00cb440-e863-440b-a36f-74a296e06578"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "31e73c55-4701-4c8d-b7ad-bcdaf4118421",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  ""
                ],
                "_lastExecutionId": "7756b368-fef5-4dc3-a926-b2bd2792d039"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created PartyRole",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "path": [
              "r1-productcatalog",
              "tmf-api",
              "partyRoleManagement",
              "v4",
              "partyRole",
              "b00cb440-e863-440b-a36f-74a296e06578"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7218cbe6-010d-433e-bc3d-3977ac4508cd",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ead5d4a1-20da-4eb0-9dfe-6258e35f2d5f",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 May 2021 14:00:47 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "85"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              54,
              48,
              44,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              82,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              103,
              105,
              118,
              101,
              110,
              32,
              105,
              100,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 85
        },
        "id": "b29340b5-f565-4575-ae41-926f4b7a840e",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 6215
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201",
          "message": "expected response to have status code 201 but got 400",
          "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "07f314d63800094e22e662fde7069e53",
          "id": "7334c308-9a46-4ef5-bb1a-a2bc80116941",
          "timestamp": 1620741646614,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
              }
            }
          ]
        },
        "parent": {
          "id": "552ce9c3-8bdc-4640-a8de-cca2d04e2ee3",
          "name": "N1",
          "item": [
            {
              "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
                  }
                }
              ]
            },
            {
              "id": "9982ef18-835d-429d-814d-4d4b2f88c4b8",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "90be12d8-dd0f-4c72-bcf4-901590d9cfe0"
                  }
                }
              ]
            },
            {
              "id": "15433ac8-78cc-4c73-8c8c-832da1e277da",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c5f6b015-a520-4f30-a634-315372676004"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6b18810a-6354-48db-aed1-d5ea0ea0eda5",
          "httpRequestId": "8390ddaf-854f-4215-8584-da417281f4c6",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ 'code', 'reason', 'message' ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ 'code', 'reason', 'message' ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "0592536d04ac74329436d34710fa27aa",
          "id": "ad35071f-0e72-4ad4-9202-369ed94e5ddb",
          "timestamp": 1620741646619,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
              }
            }
          ]
        },
        "parent": {
          "id": "552ce9c3-8bdc-4640-a8de-cca2d04e2ee3",
          "name": "N1",
          "item": [
            {
              "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
                  }
                }
              ]
            },
            {
              "id": "9982ef18-835d-429d-814d-4d4b2f88c4b8",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "90be12d8-dd0f-4c72-bcf4-901590d9cfe0"
                  }
                }
              ]
            },
            {
              "id": "15433ac8-78cc-4c73-8c8c-832da1e277da",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c5f6b015-a520-4f30-a634-315372676004"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6b18810a-6354-48db-aed1-d5ea0ea0eda5",
          "httpRequestId": "8390ddaf-854f-4215-8584-da417281f4c6",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response has name attribute",
          "message": "expected undefined to be a string",
          "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:3:1)",
          "checksum": "467da55d0af94b10370bf67335cff3be",
          "id": "f2660bd2-b7b7-43f6-906d-0bac6031325f",
          "timestamp": 1620741646620,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
              }
            }
          ]
        },
        "parent": {
          "id": "552ce9c3-8bdc-4640-a8de-cca2d04e2ee3",
          "name": "N1",
          "item": [
            {
              "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
                  }
                }
              ]
            },
            {
              "id": "9982ef18-835d-429d-814d-4d4b2f88c4b8",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "90be12d8-dd0f-4c72-bcf4-901590d9cfe0"
                  }
                }
              ]
            },
            {
              "id": "15433ac8-78cc-4c73-8c8c-832da1e277da",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c5f6b015-a520-4f30-a634-315372676004"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6b18810a-6354-48db-aed1-d5ea0ea0eda5",
          "httpRequestId": "8390ddaf-854f-4215-8584-da417281f4c6",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Response has href attribute",
          "message": "expected undefined to be a string",
          "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:4:1)",
          "checksum": "d14566ad7a15bdf1547ee1ecf2523906",
          "id": "b22faea0-aa01-4287-85c7-bcfdd95f2757",
          "timestamp": 1620741646621,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
              }
            }
          ]
        },
        "parent": {
          "id": "552ce9c3-8bdc-4640-a8de-cca2d04e2ee3",
          "name": "N1",
          "item": [
            {
              "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
                  }
                }
              ]
            },
            {
              "id": "9982ef18-835d-429d-814d-4d4b2f88c4b8",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "90be12d8-dd0f-4c72-bcf4-901590d9cfe0"
                  }
                }
              ]
            },
            {
              "id": "15433ac8-78cc-4c73-8c8c-832da1e277da",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c5f6b015-a520-4f30-a634-315372676004"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6b18810a-6354-48db-aed1-d5ea0ea0eda5",
          "httpRequestId": "8390ddaf-854f-4215-8584-da417281f4c6",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 4,
          "test": "Response has id attribute",
          "message": "expected undefined to be a string",
          "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:5:1)",
          "checksum": "b42b42fce085f4fe6ea372f210e0fed7",
          "id": "e1c7055a-e836-4980-a13b-a9baccb7bcf0",
          "timestamp": 1620741646621,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
              }
            }
          ]
        },
        "parent": {
          "id": "552ce9c3-8bdc-4640-a8de-cca2d04e2ee3",
          "name": "N1",
          "item": [
            {
              "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
                  }
                }
              ]
            },
            {
              "id": "9982ef18-835d-429d-814d-4d4b2f88c4b8",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "90be12d8-dd0f-4c72-bcf4-901590d9cfe0"
                  }
                }
              ]
            },
            {
              "id": "15433ac8-78cc-4c73-8c8c-832da1e277da",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c5f6b015-a520-4f30-a634-315372676004"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6b18810a-6354-48db-aed1-d5ea0ea0eda5",
          "httpRequestId": "8390ddaf-854f-4215-8584-da417281f4c6",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 5,
          "test": "Response has name attribute",
          "message": "expected undefined to be a string",
          "stack": "AssertionError: expected undefined to be a string\n   at Object.eval sandbox-script.js:6:1)",
          "checksum": "67022e7602f1d0567d07dd3b41940326",
          "id": "a74e869f-2f21-4671-a6d0-92d93fbd9d9f",
          "timestamp": 1620741646622,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 6,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:5 in test-script",
        "source": {
          "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
              }
            }
          ]
        },
        "parent": {
          "id": "552ce9c3-8bdc-4640-a8de-cca2d04e2ee3",
          "name": "N1",
          "item": [
            {
              "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
                  }
                }
              ]
            },
            {
              "id": "9982ef18-835d-429d-814d-4d4b2f88c4b8",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "90be12d8-dd0f-4c72-bcf4-901590d9cfe0"
                  }
                }
              ]
            },
            {
              "id": "15433ac8-78cc-4c73-8c8c-832da1e277da",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c5f6b015-a520-4f30-a634-315372676004"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6b18810a-6354-48db-aed1-d5ea0ea0eda5",
          "httpRequestId": "8390ddaf-854f-4215-8584-da417281f4c6",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 6,
          "test": "Body includes value held on name",
          "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
          "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:7:1)",
          "checksum": "8d35a9239f6eb0694e66d163ee81dc7a",
          "id": "6d3b55fb-9735-4f03-b357-927829414c82",
          "timestamp": 1620741646624,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 7,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:6 in test-script",
        "source": {
          "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
              }
            }
          ]
        },
        "parent": {
          "id": "552ce9c3-8bdc-4640-a8de-cca2d04e2ee3",
          "name": "N1",
          "item": [
            {
              "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
                  }
                }
              ]
            },
            {
              "id": "9982ef18-835d-429d-814d-4d4b2f88c4b8",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "90be12d8-dd0f-4c72-bcf4-901590d9cfe0"
                  }
                }
              ]
            },
            {
              "id": "15433ac8-78cc-4c73-8c8c-832da1e277da",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c5f6b015-a520-4f30-a634-315372676004"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6b18810a-6354-48db-aed1-d5ea0ea0eda5",
          "httpRequestId": "8390ddaf-854f-4215-8584-da417281f4c6",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 7,
          "test": "Body includes value held on href",
          "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
          "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:8:1)",
          "checksum": "637b9d0200e5fa716b3b132189aaf102",
          "id": "982701ab-d275-48d6-8bb9-c5280316e4d8",
          "timestamp": 1620741646624,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 8,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:7 in test-script",
        "source": {
          "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
              }
            }
          ]
        },
        "parent": {
          "id": "552ce9c3-8bdc-4640-a8de-cca2d04e2ee3",
          "name": "N1",
          "item": [
            {
              "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
                  }
                }
              ]
            },
            {
              "id": "9982ef18-835d-429d-814d-4d4b2f88c4b8",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "90be12d8-dd0f-4c72-bcf4-901590d9cfe0"
                  }
                }
              ]
            },
            {
              "id": "15433ac8-78cc-4c73-8c8c-832da1e277da",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c5f6b015-a520-4f30-a634-315372676004"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6b18810a-6354-48db-aed1-d5ea0ea0eda5",
          "httpRequestId": "8390ddaf-854f-4215-8584-da417281f4c6",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 8,
          "test": "Body includes value held on id",
          "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
          "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:9:1)",
          "checksum": "75406781bcd6cb8a6dd834e32f5fbcd9",
          "id": "ebb4e644-a2e4-47e1-9edf-7a76f469224b",
          "timestamp": 1620741646625,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 9,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:8 in test-script",
        "source": {
          "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
              }
            }
          ]
        },
        "parent": {
          "id": "552ce9c3-8bdc-4640-a8de-cca2d04e2ee3",
          "name": "N1",
          "item": [
            {
              "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
                  }
                }
              ]
            },
            {
              "id": "9982ef18-835d-429d-814d-4d4b2f88c4b8",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "90be12d8-dd0f-4c72-bcf4-901590d9cfe0"
                  }
                }
              ]
            },
            {
              "id": "15433ac8-78cc-4c73-8c8c-832da1e277da",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c5f6b015-a520-4f30-a634-315372676004"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6b18810a-6354-48db-aed1-d5ea0ea0eda5",
          "httpRequestId": "8390ddaf-854f-4215-8584-da417281f4c6",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 9,
          "test": "Body includes value held on name",
          "message": "expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined",
          "stack": "AssertionError: expected '{\"code\":24,\"reason\":\"Invalid body field\",\"message\":\"Property: roleType not allowed in resource \"}' to include undefined\n   at Object.eval sandbox-script.js:10:1)",
          "checksum": "3371d4647fc82c247216e721d4d7e719",
          "id": "296b3f4c-5769-4f3c-8fc7-8565c284a5a0",
          "timestamp": 1620741646626,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 10,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:9 in test-script",
        "source": {
          "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation creates a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFPR01', instance['href']);",
                  "pm.globals.set('IDPR01', instance['id']);",
                  "pm.globals.set('NAMEPR01', instance['name']);",
                  "",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on name', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['name']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
              }
            }
          ]
        },
        "parent": {
          "id": "552ce9c3-8bdc-4640-a8de-cca2d04e2ee3",
          "name": "N1",
          "item": [
            {
              "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
                  }
                }
              ]
            },
            {
              "id": "9982ef18-835d-429d-814d-4d4b2f88c4b8",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "90be12d8-dd0f-4c72-bcf4-901590d9cfe0"
                  }
                }
              ]
            },
            {
              "id": "15433ac8-78cc-4c73-8c8c-832da1e277da",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c5f6b015-a520-4f30-a634-315372676004"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 15,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6b18810a-6354-48db-aed1-d5ea0ea0eda5",
          "httpRequestId": "8390ddaf-854f-4215-8584-da417281f4c6",
          "scriptId": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
          "execution": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "4b5c6b1976c3c5d8eab21f19088e67bc",
          "id": "7d5986cb-a88c-4e3b-9b5b-c1c918e32abf",
          "timestamp": 1620741646720,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9982ef18-835d-429d-814d-4d4b2f88c4b8",
          "name": "/PartyRole",
          "request": {
            "description": {
              "content": "This operation search for the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                  "        }  ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                  "        }",
                  "   ",
                  "  }",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "90be12d8-dd0f-4c72-bcf4-901590d9cfe0"
              }
            }
          ]
        },
        "parent": {
          "id": "552ce9c3-8bdc-4640-a8de-cca2d04e2ee3",
          "name": "N1",
          "item": [
            {
              "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
                  }
                }
              ]
            },
            {
              "id": "9982ef18-835d-429d-814d-4d4b2f88c4b8",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "90be12d8-dd0f-4c72-bcf4-901590d9cfe0"
                  }
                }
              ]
            },
            {
              "id": "15433ac8-78cc-4c73-8c8c-832da1e277da",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c5f6b015-a520-4f30-a634-315372676004"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "7fc71d68-b813-4d3d-b339-c95d8e332e86",
          "length": 15,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e5488ada-5924-40bd-b4b3-2fd0128d5a45",
          "scriptId": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
          "execution": "90be12d8-dd0f-4c72-bcf4-901590d9cfe0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "a0a1e6ff44f64661ee4a26a8f5bf67cc",
          "id": "1f3d79d4-e570-4ff4-88b5-e0004b9d8373",
          "timestamp": 1620741646815,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "15433ac8-78cc-4c73-8c8c-832da1e277da",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "c5f6b015-a520-4f30-a634-315372676004"
              }
            }
          ]
        },
        "parent": {
          "id": "552ce9c3-8bdc-4640-a8de-cca2d04e2ee3",
          "name": "N1",
          "item": [
            {
              "id": "5b020b53-ddbf-4319-a37d-d80036af190d",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation creates a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"name\":\"qqymucymyd\",\"roleType\":{}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "deed4c90-31bf-41be-81ed-f24f61ab5bfb",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFPR01', instance['href']);",
                      "pm.globals.set('IDPR01', instance['id']);",
                      "pm.globals.set('NAMEPR01', instance['name']);",
                      "",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on name', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['name']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "fcbd0388-98a4-40f4-a067-35ddc775c0d3"
                  }
                }
              ]
            },
            {
              "id": "9982ef18-835d-429d-814d-4d4b2f88c4b8",
              "name": "/PartyRole",
              "request": {
                "description": {
                  "content": "This operation search for the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ceb748-f31d-4b8b-9748-d4c0c4a265f9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }  ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR02');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR02');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR02');});",
                      "        }",
                      "   ",
                      "  }",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "90be12d8-dd0f-4c72-bcf4-901590d9cfe0"
                  }
                }
              ]
            },
            {
              "id": "15433ac8-78cc-4c73-8c8c-832da1e277da",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c5f6b015-a520-4f30-a634-315372676004"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "6e9e6d0c-b458-4e91-90f4-c04dc3cd8efa",
          "length": 15,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3d5703f9-4797-4661-a1ee-4390fec30a74",
          "scriptId": "92a67d99-9ef8-45cc-a4db-d617a6e5c4b6",
          "execution": "c5f6b015-a520-4f30-a634-315372676004"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "cada49c3645d5b70758d57cce7e1287b",
          "id": "47c8564d-d6d8-42fa-bace-45a498a5c507",
          "timestamp": 1620741647004,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1e1c67ae-6405-491e-8276-49238bcdb757",
          "name": "/PartyRole?name={{NAMEPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{NAMEPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "eafc94f8-3c8f-44cc-bfab-52c49466f93c"
              }
            }
          ]
        },
        "parent": {
          "id": "30f08125-abfc-4847-a66e-f7d089b571f5",
          "name": "N2",
          "item": [
            {
              "id": "1546792b-4fa7-4c92-b72d-2865ac752c35",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "069e813c-df79-4458-bb8a-bc350927d154"
                  }
                }
              ]
            },
            {
              "id": "1e1c67ae-6405-491e-8276-49238bcdb757",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "eafc94f8-3c8f-44cc-bfab-52c49466f93c"
                  }
                }
              ]
            },
            {
              "id": "faea9460-bcce-4310-a069-d0aba8433770",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "dee3af57-8ca6-44f1-83aa-c944ec0b03c3"
                  }
                }
              ]
            },
            {
              "id": "80d38bd6-30f9-44cb-9e53-439e70a16d34",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "84c2a4e9-351e-437a-9f1c-85e66777db5b"
                  }
                }
              ]
            },
            {
              "id": "e5510b38-e187-4db1-85cb-270610c77656",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "2fa1d529-9b09-40be-b9f8-91aaab320d61"
                  }
                }
              ]
            },
            {
              "id": "9c9342a1-0b5a-48a6-8d46-e2af4fb66369",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a03cd145-1261-4102-975f-e22c162d37d2"
                  }
                }
              ]
            },
            {
              "id": "b77e2732-f5c7-45db-8dd8-78274a907de8",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "85268230-29f0-46b1-92f7-a67ef2c7f9e3"
                  }
                }
              ]
            },
            {
              "id": "ab515b4f-fb88-4098-a39f-360eca7623c5",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "5a28870c-4d6b-4909-8b62-d906fcade918"
                  }
                }
              ]
            },
            {
              "id": "5fb53c61-800f-4e3d-9a7a-1db7bab432cc",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "8abe3249-7e4e-46fa-bce8-f328da3d3ed6"
                  }
                }
              ]
            },
            {
              "id": "1a932e2b-dfe8-4cc8-97fd-a813ec49de08",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "47329eb9-2662-4397-91ed-685c3fa48ec5"
                  }
                }
              ]
            },
            {
              "id": "131e48da-fd6b-4371-88d9-9bad3b23e1b5",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "fef331f2-3c69-4233-b4a6-61b8e6bb85bc"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "8f9334ec-9350-4210-851d-c3b223b6c858",
          "length": 15,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "503fa642-4062-4c51-880b-a400fb59bb41",
          "scriptId": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
          "execution": "eafc94f8-3c8f-44cc-bfab-52c49466f93c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "bc19defb619c63f2d545b97aa4011709",
          "id": "0a4bbced-d632-4d03-94ff-39e7bd2d7205",
          "timestamp": 1620741647299,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "e5510b38-e187-4db1-85cb-270610c77656",
          "name": "/PartyRole?id={{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{IDPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "2fa1d529-9b09-40be-b9f8-91aaab320d61"
              }
            }
          ]
        },
        "parent": {
          "id": "30f08125-abfc-4847-a66e-f7d089b571f5",
          "name": "N2",
          "item": [
            {
              "id": "1546792b-4fa7-4c92-b72d-2865ac752c35",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "069e813c-df79-4458-bb8a-bc350927d154"
                  }
                }
              ]
            },
            {
              "id": "1e1c67ae-6405-491e-8276-49238bcdb757",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "eafc94f8-3c8f-44cc-bfab-52c49466f93c"
                  }
                }
              ]
            },
            {
              "id": "faea9460-bcce-4310-a069-d0aba8433770",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "dee3af57-8ca6-44f1-83aa-c944ec0b03c3"
                  }
                }
              ]
            },
            {
              "id": "80d38bd6-30f9-44cb-9e53-439e70a16d34",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "84c2a4e9-351e-437a-9f1c-85e66777db5b"
                  }
                }
              ]
            },
            {
              "id": "e5510b38-e187-4db1-85cb-270610c77656",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "2fa1d529-9b09-40be-b9f8-91aaab320d61"
                  }
                }
              ]
            },
            {
              "id": "9c9342a1-0b5a-48a6-8d46-e2af4fb66369",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a03cd145-1261-4102-975f-e22c162d37d2"
                  }
                }
              ]
            },
            {
              "id": "b77e2732-f5c7-45db-8dd8-78274a907de8",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "85268230-29f0-46b1-92f7-a67ef2c7f9e3"
                  }
                }
              ]
            },
            {
              "id": "ab515b4f-fb88-4098-a39f-360eca7623c5",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "5a28870c-4d6b-4909-8b62-d906fcade918"
                  }
                }
              ]
            },
            {
              "id": "5fb53c61-800f-4e3d-9a7a-1db7bab432cc",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "8abe3249-7e4e-46fa-bce8-f328da3d3ed6"
                  }
                }
              ]
            },
            {
              "id": "1a932e2b-dfe8-4cc8-97fd-a813ec49de08",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "47329eb9-2662-4397-91ed-685c3fa48ec5"
                  }
                }
              ]
            },
            {
              "id": "131e48da-fd6b-4371-88d9-9bad3b23e1b5",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "fef331f2-3c69-4233-b4a6-61b8e6bb85bc"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "266e996b-ad80-44e3-8d17-068cac3d9907",
          "length": 15,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "58e1fe8e-ab7a-48e6-88e7-b4ba94fe5d67",
          "scriptId": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
          "execution": "2fa1d529-9b09-40be-b9f8-91aaab320d61"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "516a59347529fef1eb7e754723fb4e6d",
          "id": "cc954012-b30a-408d-bba2-0488e3cbb02e",
          "timestamp": 1620741647486,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b77e2732-f5c7-45db-8dd8-78274a907de8",
          "name": "/PartyRole?name={{NAMEPR01}}",
          "request": {
            "description": {
              "content": "This operation filter a PartyRole",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [
                {
                  "key": "name",
                  "value": "{{NAMEPR01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "85268230-29f0-46b1-92f7-a67ef2c7f9e3"
              }
            }
          ]
        },
        "parent": {
          "id": "30f08125-abfc-4847-a66e-f7d089b571f5",
          "name": "N2",
          "item": [
            {
              "id": "1546792b-4fa7-4c92-b72d-2865ac752c35",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "069e813c-df79-4458-bb8a-bc350927d154"
                  }
                }
              ]
            },
            {
              "id": "1e1c67ae-6405-491e-8276-49238bcdb757",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "eafc94f8-3c8f-44cc-bfab-52c49466f93c"
                  }
                }
              ]
            },
            {
              "id": "faea9460-bcce-4310-a069-d0aba8433770",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "dee3af57-8ca6-44f1-83aa-c944ec0b03c3"
                  }
                }
              ]
            },
            {
              "id": "80d38bd6-30f9-44cb-9e53-439e70a16d34",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "84c2a4e9-351e-437a-9f1c-85e66777db5b"
                  }
                }
              ]
            },
            {
              "id": "e5510b38-e187-4db1-85cb-270610c77656",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "2fa1d529-9b09-40be-b9f8-91aaab320d61"
                  }
                }
              ]
            },
            {
              "id": "9c9342a1-0b5a-48a6-8d46-e2af4fb66369",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a03cd145-1261-4102-975f-e22c162d37d2"
                  }
                }
              ]
            },
            {
              "id": "b77e2732-f5c7-45db-8dd8-78274a907de8",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "85268230-29f0-46b1-92f7-a67ef2c7f9e3"
                  }
                }
              ]
            },
            {
              "id": "ab515b4f-fb88-4098-a39f-360eca7623c5",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "5a28870c-4d6b-4909-8b62-d906fcade918"
                  }
                }
              ]
            },
            {
              "id": "5fb53c61-800f-4e3d-9a7a-1db7bab432cc",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "8abe3249-7e4e-46fa-bce8-f328da3d3ed6"
                  }
                }
              ]
            },
            {
              "id": "1a932e2b-dfe8-4cc8-97fd-a813ec49de08",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "47329eb9-2662-4397-91ed-685c3fa48ec5"
                  }
                }
              ]
            },
            {
              "id": "131e48da-fd6b-4371-88d9-9bad3b23e1b5",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "fef331f2-3c69-4233-b4a6-61b8e6bb85bc"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "ef6418a6-0ef6-48c8-adb7-ccc611986982",
          "length": 15,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "80ce5906-c676-4fe2-b4ff-45266bfe1bd2",
          "scriptId": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
          "execution": "85268230-29f0-46b1-92f7-a67ef2c7f9e3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 405",
          "stack": "AssertionError: expected response to have status code 200 but got 405\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "a5795b37f243c7713278eb9b12c8e4c5",
          "id": "2a5497d7-0832-4a18-a0fb-976b8db145cf",
          "timestamp": 1620741647577,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ab515b4f-fb88-4098-a39f-360eca7623c5",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f653783a-0aea-44d0-a163-6934b140c585",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "5a28870c-4d6b-4909-8b62-d906fcade918"
              }
            }
          ]
        },
        "parent": {
          "id": "30f08125-abfc-4847-a66e-f7d089b571f5",
          "name": "N2",
          "item": [
            {
              "id": "1546792b-4fa7-4c92-b72d-2865ac752c35",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "069e813c-df79-4458-bb8a-bc350927d154"
                  }
                }
              ]
            },
            {
              "id": "1e1c67ae-6405-491e-8276-49238bcdb757",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "eafc94f8-3c8f-44cc-bfab-52c49466f93c"
                  }
                }
              ]
            },
            {
              "id": "faea9460-bcce-4310-a069-d0aba8433770",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "dee3af57-8ca6-44f1-83aa-c944ec0b03c3"
                  }
                }
              ]
            },
            {
              "id": "80d38bd6-30f9-44cb-9e53-439e70a16d34",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "84c2a4e9-351e-437a-9f1c-85e66777db5b"
                  }
                }
              ]
            },
            {
              "id": "e5510b38-e187-4db1-85cb-270610c77656",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "2fa1d529-9b09-40be-b9f8-91aaab320d61"
                  }
                }
              ]
            },
            {
              "id": "9c9342a1-0b5a-48a6-8d46-e2af4fb66369",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a03cd145-1261-4102-975f-e22c162d37d2"
                  }
                }
              ]
            },
            {
              "id": "b77e2732-f5c7-45db-8dd8-78274a907de8",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "85268230-29f0-46b1-92f7-a67ef2c7f9e3"
                  }
                }
              ]
            },
            {
              "id": "ab515b4f-fb88-4098-a39f-360eca7623c5",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "5a28870c-4d6b-4909-8b62-d906fcade918"
                  }
                }
              ]
            },
            {
              "id": "5fb53c61-800f-4e3d-9a7a-1db7bab432cc",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "8abe3249-7e4e-46fa-bce8-f328da3d3ed6"
                  }
                }
              ]
            },
            {
              "id": "1a932e2b-dfe8-4cc8-97fd-a813ec49de08",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "47329eb9-2662-4397-91ed-685c3fa48ec5"
                  }
                }
              ]
            },
            {
              "id": "131e48da-fd6b-4371-88d9-9bad3b23e1b5",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "fef331f2-3c69-4233-b4a6-61b8e6bb85bc"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "749c56fb-3959-4912-b80b-b83c3365f879",
          "length": 15,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1c632698-1628-41aa-be81-a9765994be39",
          "scriptId": "f653783a-0aea-44d0-a163-6934b140c585",
          "execution": "5a28870c-4d6b-4909-8b62-d906fcade918"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Instance has all mandatory attributes",
          "message": "expected [ Array(6) ] to be a superset of [ Array(6) ]",
          "stack": "AssertionError: expected [ Array(6) ] to be a superset of [ Array(6) ]\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "71f79b0d5a8f0583269da176b5578e5f",
          "id": "cf301a23-91c2-4ba4-bd00-7295b4207b5c",
          "timestamp": 1620741647667,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "5fb53c61-800f-4e3d-9a7a-1db7bab432cc",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                  "      ",
                  "       ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on name', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['name']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                  "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                  "            pm.test('IDPR02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "8abe3249-7e4e-46fa-bce8-f328da3d3ed6"
              }
            }
          ]
        },
        "parent": {
          "id": "30f08125-abfc-4847-a66e-f7d089b571f5",
          "name": "N2",
          "item": [
            {
              "id": "1546792b-4fa7-4c92-b72d-2865ac752c35",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "069e813c-df79-4458-bb8a-bc350927d154"
                  }
                }
              ]
            },
            {
              "id": "1e1c67ae-6405-491e-8276-49238bcdb757",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "eafc94f8-3c8f-44cc-bfab-52c49466f93c"
                  }
                }
              ]
            },
            {
              "id": "faea9460-bcce-4310-a069-d0aba8433770",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "dee3af57-8ca6-44f1-83aa-c944ec0b03c3"
                  }
                }
              ]
            },
            {
              "id": "80d38bd6-30f9-44cb-9e53-439e70a16d34",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "84c2a4e9-351e-437a-9f1c-85e66777db5b"
                  }
                }
              ]
            },
            {
              "id": "e5510b38-e187-4db1-85cb-270610c77656",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "2fa1d529-9b09-40be-b9f8-91aaab320d61"
                  }
                }
              ]
            },
            {
              "id": "9c9342a1-0b5a-48a6-8d46-e2af4fb66369",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a03cd145-1261-4102-975f-e22c162d37d2"
                  }
                }
              ]
            },
            {
              "id": "b77e2732-f5c7-45db-8dd8-78274a907de8",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "85268230-29f0-46b1-92f7-a67ef2c7f9e3"
                  }
                }
              ]
            },
            {
              "id": "ab515b4f-fb88-4098-a39f-360eca7623c5",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "5a28870c-4d6b-4909-8b62-d906fcade918"
                  }
                }
              ]
            },
            {
              "id": "5fb53c61-800f-4e3d-9a7a-1db7bab432cc",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "8abe3249-7e4e-46fa-bce8-f328da3d3ed6"
                  }
                }
              ]
            },
            {
              "id": "1a932e2b-dfe8-4cc8-97fd-a813ec49de08",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "47329eb9-2662-4397-91ed-685c3fa48ec5"
                  }
                }
              ]
            },
            {
              "id": "131e48da-fd6b-4371-88d9-9bad3b23e1b5",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "fef331f2-3c69-4233-b4a6-61b8e6bb85bc"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "ed827a59-be0e-482d-b999-f9c23d9ad335",
          "length": 15,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "edd2e24e-729b-4892-a6b3-beb229baf69e",
          "scriptId": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
          "execution": "8abe3249-7e4e-46fa-bce8-f328da3d3ed6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 204",
          "message": "expected response to have status code 204 but got 405",
          "stack": "AssertionError: expected response to have status code 204 but got 405\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "c248c7326ad3a680ca57953e6b3c2acf",
          "id": "27579d5a-2c63-4162-9a5a-722cabe7f5d6",
          "timestamp": 1620741647759,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1a932e2b-dfe8-4cc8-97fd-a813ec49de08",
          "name": "/PartyRole/{{IDPR01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "47329eb9-2662-4397-91ed-685c3fa48ec5"
              }
            }
          ]
        },
        "parent": {
          "id": "30f08125-abfc-4847-a66e-f7d089b571f5",
          "name": "N2",
          "item": [
            {
              "id": "1546792b-4fa7-4c92-b72d-2865ac752c35",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "069e813c-df79-4458-bb8a-bc350927d154"
                  }
                }
              ]
            },
            {
              "id": "1e1c67ae-6405-491e-8276-49238bcdb757",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "eafc94f8-3c8f-44cc-bfab-52c49466f93c"
                  }
                }
              ]
            },
            {
              "id": "faea9460-bcce-4310-a069-d0aba8433770",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "dee3af57-8ca6-44f1-83aa-c944ec0b03c3"
                  }
                }
              ]
            },
            {
              "id": "80d38bd6-30f9-44cb-9e53-439e70a16d34",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "84c2a4e9-351e-437a-9f1c-85e66777db5b"
                  }
                }
              ]
            },
            {
              "id": "e5510b38-e187-4db1-85cb-270610c77656",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "2fa1d529-9b09-40be-b9f8-91aaab320d61"
                  }
                }
              ]
            },
            {
              "id": "9c9342a1-0b5a-48a6-8d46-e2af4fb66369",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a03cd145-1261-4102-975f-e22c162d37d2"
                  }
                }
              ]
            },
            {
              "id": "b77e2732-f5c7-45db-8dd8-78274a907de8",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "85268230-29f0-46b1-92f7-a67ef2c7f9e3"
                  }
                }
              ]
            },
            {
              "id": "ab515b4f-fb88-4098-a39f-360eca7623c5",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "5a28870c-4d6b-4909-8b62-d906fcade918"
                  }
                }
              ]
            },
            {
              "id": "5fb53c61-800f-4e3d-9a7a-1db7bab432cc",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "8abe3249-7e4e-46fa-bce8-f328da3d3ed6"
                  }
                }
              ]
            },
            {
              "id": "1a932e2b-dfe8-4cc8-97fd-a813ec49de08",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "47329eb9-2662-4397-91ed-685c3fa48ec5"
                  }
                }
              ]
            },
            {
              "id": "131e48da-fd6b-4371-88d9-9bad3b23e1b5",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "fef331f2-3c69-4233-b4a6-61b8e6bb85bc"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "c9c80340-be70-476a-9e2b-2bca1bf72df6",
          "length": 15,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3f9da5a5-063d-4742-a5dc-ffffba6faad4",
          "scriptId": "396d389e-c29c-4f93-a7b4-41e2c728886b",
          "execution": "47329eb9-2662-4397-91ed-685c3fa48ec5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 404",
          "message": "expected response to have status code 404 but got 200",
          "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "d13d7d573ac6ef4ce79925080d6d7aa1",
          "id": "295b5bcf-6621-4fc7-a112-17dab74bed68",
          "timestamp": 1620741647850,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "131e48da-fd6b-4371-88d9-9bad3b23e1b5",
          "name": "/PartyRole/404ID",
          "request": {
            "description": {
              "content": "This operation search for one of the created PartyRole",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDPR01}}"
              ],
              "host": [
                "{{Party_Role}}partyRole"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  ""
                ],
                "_lastExecutionId": "fef331f2-3c69-4233-b4a6-61b8e6bb85bc"
              }
            }
          ]
        },
        "parent": {
          "id": "30f08125-abfc-4847-a66e-f7d089b571f5",
          "name": "N2",
          "item": [
            {
              "id": "1546792b-4fa7-4c92-b72d-2865ac752c35",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c684b549-47d7-4668-8711-8825e2d7099c",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "069e813c-df79-4458-bb8a-bc350927d154"
                  }
                }
              ]
            },
            {
              "id": "1e1c67ae-6405-491e-8276-49238bcdb757",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "476e2ac2-c930-4cf2-9597-aa5d758ab26b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "eafc94f8-3c8f-44cc-bfab-52c49466f93c"
                  }
                }
              ]
            },
            {
              "id": "faea9460-bcce-4310-a069-d0aba8433770",
              "name": "/PartyRole?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3a5d435d-5f97-4725-859f-3a9804016614",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "dee3af57-8ca6-44f1-83aa-c944ec0b03c3"
                  }
                }
              ]
            },
            {
              "id": "80d38bd6-30f9-44cb-9e53-439e70a16d34",
              "name": "/PartyRole?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b7a68fa-23fe-4cec-84de-ea06e71a075d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "84c2a4e9-351e-437a-9f1c-85e66777db5b"
                  }
                }
              ]
            },
            {
              "id": "e5510b38-e187-4db1-85cb-270610c77656",
              "name": "/PartyRole?id={{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fa0a7463-ba58-4879-a9bb-92a7bda1ef1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "2fa1d529-9b09-40be-b9f8-91aaab320d61"
                  }
                }
              ]
            },
            {
              "id": "9c9342a1-0b5a-48a6-8d46-e2af4fb66369",
              "name": "/PartyRole?fields=name",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "name"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "815161b1-ef40-4de2-80de-dc4b15379a0e",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a03cd145-1261-4102-975f-e22c162d37d2"
                  }
                }
              ]
            },
            {
              "id": "b77e2732-f5c7-45db-8dd8-78274a907de8",
              "name": "/PartyRole?name={{NAMEPR01}}",
              "request": {
                "description": {
                  "content": "This operation filter a PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{NAMEPR01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4f02869d-12d6-4c2a-821e-d98a6d32f59f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "85268230-29f0-46b1-92f7-a67ef2c7f9e3"
                  }
                }
              ]
            },
            {
              "id": "ab515b4f-fb88-4098-a39f-360eca7623c5",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"new name\",\r\n    \"roleType\":{\r\n        \r\n    }\r\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f653783a-0aea-44d0-a163-6934b140c585",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "5a28870c-4d6b-4909-8b62-d906fcade918"
                  }
                }
              ]
            },
            {
              "id": "5fb53c61-800f-4e3d-9a7a-1db7bab432cc",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad07bbaf-3aa2-43e7-974d-ba471163583f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == \"new name\";});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['name', 'roleType', 'href', 'id', 'name', 'roleType'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                      "      ",
                      "       ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on name', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['name']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDPR01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFPR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPR01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDPR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPR01');});",
                      "            pm.test('name is ' + pm.globals.get(\"NAMEPR01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPR01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDPR02\")) {",
                      "            pm.test('IDPR02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "8abe3249-7e4e-46fa-bce8-f328da3d3ed6"
                  }
                }
              ]
            },
            {
              "id": "1a932e2b-dfe8-4cc8-97fd-a813ec49de08",
              "name": "/PartyRole/{{IDPR01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "396d389e-c29c-4f93-a7b4-41e2c728886b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "47329eb9-2662-4397-91ed-685c3fa48ec5"
                  }
                }
              ]
            },
            {
              "id": "131e48da-fd6b-4371-88d9-9bad3b23e1b5",
              "name": "/PartyRole/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created PartyRole",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDPR01}}"
                  ],
                  "host": [
                    "{{Party_Role}}partyRole"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "fef331f2-3c69-4233-b4a6-61b8e6bb85bc"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "9fdd9dc8-7507-48f7-bd28-e6cda3e440c7",
          "length": 15,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6122c114-6576-45df-bfe5-e6e9558d76bb",
          "scriptId": "e64e67e4-fb6d-4a0f-bab1-d0810abf061d",
          "execution": "fef331f2-3c69-4233-b4a6-61b8e6bb85bc"
        }
      }
    ],
    "error": null
  }
}